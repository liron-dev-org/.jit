rules:
  - id: sql-injection-1
    languages:
      - kotlin
    severity: ERROR
    message: >-
      Detected a formatted string starting with an SQL operation with a concatenated
      value that came from a function argument. This could lead to SQL
      injection if variables in the SQL statement are not properly sanitized.
    metadata:
      confidence: MEDIUM
      rule_id: sqlinjectionA
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
      impact: HIGH
    pattern-either:
      - patterns:
          - pattern-inside: |
              fun $FUNC(...,$PAR:$TYPE,...) {
                ...
              }

          - pattern-either:
              - pattern: $SELECT + $PRE + <... $PAR ...> + $POST
              - pattern: $SELECT + <... $PAR ...> + $POST
              - pattern: $SELECT + $PRE + <... $PAR ...>
              - pattern: $SELECT + <... $PAR ...>

              - pattern: $SELECT.plus($PRE).plus(<... $PAR ...>).plus($POST)
              - pattern: $SELECT.plus(<... $PAR ...>).plus($POST)
              - pattern: $SELECT.plus($PRE).plus(<... $PAR ...>)
              - pattern: $SELECT.plus(<... $PAR ...>)

              - pattern: $STRINGBUILDER.append($SELECT).append($PRE).append(<... $PAR ...>).append($POST)
              - pattern: $STRINGBUILDER.append($SELECT).append(<... $PAR ...>).append($POST)
              - pattern: $STRINGBUILDER.append($SELECT).append($PRE).append(<... $PAR ...>)
              - pattern: $STRINGBUILDER.append($SELECT).append(<... $PAR ...>)

              - pattern: |
                  $COPY = $PAR
                  ...
                  $SELECT + $PRE + <... $COPY ...> + $POST
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $SELECT + <... $COPY ...> + $POST
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $SELECT + $PRE + <... $COPY ...>
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $SELECT + <... $COPY ...>

              - pattern: |
                  $COPY = $PAR
                  ...asd
                  $SELECT.plus($PRE).plus(<... $COPY ...>).plus($POST)
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $SELECT.plus(<... $COPY ...>).plus($POST)
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $SELECT.plus($PRE).plus(<... $COPY ...>)
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $SELECT.plus(<... $COPY ...>)

              - pattern: |
                  $COPY = $PAR
                  ...
                  $STRINGBUILDER.append($SELECT).append($PRE).append(<... $COPY ...>).append($POST)
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $STRINGBUILDER.append($SELECT).append(<... $COPY ...>).append($POST)
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $STRINGBUILDER.append($SELECT).append($PRE).append(<... $COPY ...>)
              - pattern: |
                  $COPY = $PAR;
                  ...
                  $STRINGBUILDER.append($SELECT).append(<... $COPY ...>)

          - metavariable-regex:
              metavariable: $SELECT
              regex: (?is)^["']+\s*(select |delete |insert |create |update |alter |drop ).*["']+

      - patterns:
          - pattern-inside: |
              fun $FUNC(...,$PAR:$TYPE,...) {
                ...
              }

          - pattern: $QUERY = <... $PAR ...>
          - pattern: $QUERY = $SELECT
          - metavariable-regex:
              metavariable: $SELECT
              regex: (?is)^["']+\s*(select |delete |insert |create |update |alter |drop ).*["']+

      - patterns:
          - pattern-inside: |
              fun $FUNC(...,$PAR:$TYPE,...) {
                ...
                $COPY = $PAR
                ...
                $QUERY = $SELECT
                ...
              }

          - pattern: |
              $COPY = $PAR
              ...
              $QUERY = <... $COPY ...>
          - metavariable-regex:
              metavariable: $SELECT
              regex: (?is)^["']+\s*(select |delete |insert |create |update |alter |drop ).*["']+

      - patterns:
          - pattern-inside: |
              fun $FUNC(...,$PAR:$TYPE,...) {
                ...
                $QUERYMETHOD($SELECT)
                ...
              }

          - pattern: $QUERYMETHOD(<... $PAR ...>)
          - metavariable-regex:
              metavariable: $SELECT
              regex: (?is)^["']+\s*(select |delete |insert |create |update |alter |drop ).*["']+

      - patterns:
          - pattern-inside: |
              fun $FUNC(...,$PAR:$TYPE,...) {
                ...
                $COPY = $PAR
                ...
                $QUERYMETHOD($SELECT)
                ...
              }

          - pattern: |
              $COPY = $PAR
              ...
              $QUERYMETHOD(<... $COPY ...>)
          - metavariable-regex:
              metavariable: $SELECT
              regex: (?is)^["']+\s*(select |delete |insert |create |update |alter |drop ).*["']+

  - id: sql-injection-2
    languages:
      - kotlin
    severity: ERROR
    message: >-
      Detected a string starting with an SQL operation with a concatenated
      value. This could lead to SQL injection if variables in the SQL
      statement are not properly sanitized.
    metadata:
      confidence: MEDIUM
      rule_id: sqlinjectionB
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
      impact: HIGH
    patterns:
      - pattern-either:
          - pattern: $VAR = $SELECT
          - pattern: $VAR = $SELECT.plus($AAAA)
          - pattern: $VAR = $STRINGBUILDER.append($SELECT).append($AAAA)
          - pattern: $SELECT.$FUNCT()
          - pattern: $SELECT + $AAAA
          - pattern: $SELECT + $AAAA + $BBBB
          - pattern: $SELECT + $AAAA + $BBBB + $CCCC
          - pattern: $SELECT.plus($AAAA)
          - pattern: $SELECT.plus($AAAA).plus($BBBB)
          - pattern: $SELECT.plus($AAAA).plus($BBBB).plus($CCCC)
          - pattern: $STRINGBUILDER.append($SELECT).append($AAAA)
          - pattern: $STRINGBUILDER.append($SELECT).append($AAAA).append($BBBB)
          - pattern: $STRINGBUILDER.append($SELECT).append($AAAA).append($BBBB).append($CCCC)
      - metavariable-regex:
          metavariable: $SELECT
          regex: (?is)^["']+\s*(select |delete |insert |create |update |alter |drop ).*["']+

  - id: android-webview-privileges
    languages:
      - kotlin
    severity: ERROR
    message: >-
      Detected portions of the Android Kotlin code that make use of WebView, in order to check for
      insecure configurations.
    metadata:
      confidence: MEDIUM
      rule_id: webviewA
      references:
        - https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md
      impact: HIGH
    pattern-either:
      - pattern: $OBJ.addJavascriptInterface(...)
      - pattern: addJavascriptInterface(...)
      - pattern: |
          @JavascriptInterface
          fun $METHOD(...) { ... }

      - pattern: $WEBVIEW.setAllowContentAccess(...)
      - pattern: setAllowContentAccess(...)
      - pattern: allowContentAccess = ...
      - pattern: $OBJ.allowContentAccess = ...

      - pattern: $WEBVIEW.setAllowFileAccess(...)
      - pattern: setAllowFileAccess(...)
      - pattern: allowFileAccess = ...
      - pattern: $OBJ.allowFileAccess = ...

      - pattern: $WEBVIEW.setAllowFileAccessFromFileURLs(...)
      - pattern: setAllowFileAccessFromFileURLs(...)
      - pattern: allowFileAccessFromFileURLs = ...
      - pattern: $OBJ.allowFileAccessFromFileURLs = ...

      - pattern: $WEBVIEW.setAllowUniversalAccessFromFileURLs(...)
      - pattern: setAllowUniversalAccessFromFileURLs(...)
      - pattern: allowUniversalAccessFromFileURLs = ...
      - pattern: $OBJ.allowUniversalAccessFromFileURLs = ...

  - id: anonymous-ldap-bind
    metadata:
      cwe:
        - "CWE-287: Improper sAuthentication"
      owasp:
        - A02:2017 - Broken Authentication
        - A07:2021 - Identification and Authentication Failures
      source: https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS
      category: security
      technology:
        - kotlin
      references:
        - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      rule_id: r2cruleA
    message: >-
      Detected anonymous LDAP bind.
      This permits anonymous users to execute LDAP statements. Consider enforcing
      authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html
      for more information.
    severity: ERROR
    pattern: |
      $ENV.put($CTX.SECURITY_AUTHENTICATION, "none")
      ...
      $DCTX = InitialDirContext($ENV, ...)
    languages:
      - kotlin

  - id: command-injection-formatted-runtime-call
    message: >-
      A formatted or concatenated string was detected as input to a java.lang.Runtime
      call.
      This is dangerous if a variable is controlled by user input and could result in
      a
      command injection. Ensure your variables are not controlled by users or sufficiently
      sanitized.
    metadata:
      cwe:
        - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      source: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.
      category: security
      technology:
        - kotlin
      references:
        - https://owasp.org/Top10/A03_2021-Injection
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
      rule_id: r2cruleB
    severity: ERROR
    languages:
      - kotlin
    pattern-either:
      - pattern: $RUNTIME.exec($X + $Y)
      - pattern: $RUNTIME.exec(String.format(...))
      - pattern: $RUNTIME.loadLibrary($X + $Y)
      - pattern: $RUNTIME.loadLibrary(String.format(...))

  - id: ecb-cipher
    metadata:
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source: https://find-sec-bugs.github.io/bugs.htm#ECB_MODE
      category: security
      technology:
        - kotlin
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      rule_id: r2cruleC
    message:
      Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time
      which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any
      integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.
    severity: ERROR
    languages:
      - kotlin
    patterns:
      - pattern-either:
          - pattern: |
              val $VAR : Cipher = $CIPHER.getInstance($MODE)
          - pattern: |
              var $VAR : Cipher = $CIPHER.getInstance($MODE)
          - pattern: |
              val $VAR = $CIPHER.getInstance($MODE)
          - pattern: |
              var $VAR = $CIPHER.getInstance($MODE)
      - metavariable-regex:
          metavariable: $MODE
          regex: .*ECB.*

  - id: use-of-md5
    message:
      Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and
      is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
    languages:
      - kotlin
    severity: ERROR
    metadata:
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      source: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5
      category: security
      technology:
        - kotlin
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      rule_id: r2cruleD
    pattern-either:
      - pattern: |
          $VAR = $MD.getInstance("MD5")
      - pattern: |
          $DU.getMd5Digest().digest(...)

  - id: use-of-sha1
    message: >-
      Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
      collision resistant and is therefore not suitable as a cryptographic
      signature. Use SHA256 or SHA3 instead.
    languages: [kotlin]
    severity: ERROR
    metadata:
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      source: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      category: security
      technology:
        - kotlin
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: HIGH
      confidence: MEDIUM
      rule_id: r2cruleE
    pattern-either:
      - pattern: |
          $VAR = $MD.getInstance("SHA-1")
      - pattern: |
          $DU.getSha1Digest().digest(...)

  - id: use-of-weak-rsa-key
    message: RSA keys should be at least 2048 bits based on NIST recommendation.
    languages: [kotlin]
    severity: ERROR
    metadata:
      cwe:
        - "CWE-326: Inadequate Encryption Strength"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source: https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
      category: security
      technology:
        - kotlin
      subcategory:
        - audit
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      rule_id: r2cruleF
    patterns:
      - pattern-either:
          - pattern: |
              $KEY = $G.getInstance("RSA")
              ...
              $KEY.initialize($BITS)
      - metavariable-comparison:
          metavariable: $BITS
          comparison: $BITS < 2048

  - id: des-is-deprecated
    message:
      DES is considered deprecated. AES is the recommended cipher. Upgrade to
      use AES. See
      https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
      for more information.
    metadata:
      cwe:
        - "CWE-326: Inadequate Encryption Strength"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source: https://find-sec-bugs.github.io/bugs.htm#DES_USAGE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      references:
        - https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
        - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
      category: security
      technology:
        - java
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: HIGH
      rule_id: r2cruleG
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    severity: ERROR
    patterns:
      - pattern-either:
          - pattern-inside: $CIPHER.getInstance("=~/DES/.*/")
          - pattern-inside: $CIPHER.getInstance("DES")
      - pattern-either:
          - pattern: |
              "=~/DES/.*/"
          - pattern: |
              "DES"
    fix: |
      "AES/GCM/NoPadding"
    languages:
      - java
      - kotlin

  - id: desede-is-deprecated
    message: Triple DES (3DES or DESede) is considered deprecated. AES is the
      recommended cipher. Upgrade to use AES.
    metadata:
      cwe:
        - "CWE-326: Inadequate Encryption Strength"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source: https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE
      references:
        - https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA
      category: security
      technology:
        - java
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: HIGH
      rule_id: r2cruleH
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    severity: ERROR
    patterns:
      - pattern-either:
          - pattern: |
              $CIPHER.getInstance("=~/DESede.*/")
          - pattern: |
              $CRYPTO.KeyGenerator.getInstance("DES")
    languages:
      - java
      - kotlin

  - id: rsa-no-padding
    metadata:
      cwe:
        - "CWE-326: Inadequate Encryption Strength"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source: https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING
      references:
        - https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      category: security
      technology:
        - java
        - kotlin
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: HIGH
      rule_id: r2cruleI
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    message: Using RSA without OAEP mode weakens the encryption.
    severity: ERROR
    languages:
      - java
      - kotlin
    pattern: $CIPHER.getInstance("=~/RSA/[Nn][Oo][Nn][Ee]/NoPadding/")

  - id: no-null-cipher
    pattern: NullCipher(...)
    metadata:
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source: https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      category: security
      technology:
        - kotlin
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      rule_id: r2cruleJ
    message:
      'NullCipher was detected. This will not encrypt anything; the cipher
      text will be the same as the plain text. Use a valid, secure cipher:
      Cipher.getInstance("AES/CBC/PKCS7PADDING"). See
      https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions
      for more information.'
    severity: ERROR
    languages:
      - kotlin
