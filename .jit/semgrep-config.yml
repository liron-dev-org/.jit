rules:
  - id: rust.insecure-hashes
    message: Detected cryptographically insecure hashing function
    pattern-either:
      - pattern: md2::Md2::new(...)
      - pattern: md4::Md4::new(...)
      - pattern: md5::Md5::new(...)
      - pattern: sha1::Sha1::new(...)
    metadata:
      references:
        - https://github.com/RustCrypto/hashes
        - https://docs.rs/md2/latest/md2/
        - https://docs.rs/md4/latest/md4/
        - https://docs.rs/md5/latest/md5/
        - https://docs.rs/sha-1/latest/sha1/
      technology:
        - rust
      category: security
      cwe: "CWE-328: Use of Weak Hash"
      confidence: HIGH
      likelihood: LOW
      impact: MEDIUM
      subcategory: audit
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - rust
    severity: ERROR

  - id: rust.reqwest-accept-invalid
    message: Dangerous client configuration detected - TLS hostname and certificate
     validity are not being checked. This configuration poses a serious security risk
     as it makes the application susceptible to man-in-the-middle attacks. Please ensure
     that TLS hostname and certificate validity checks are enabled for all production
     environments and any other environment where secure, authenticated communication
     is required. Disabling these checks should only be done in controlled, non-production
     environments for testing purposes.
    pattern-either:
      - pattern: reqwest::Client::builder(). ... .danger_accept_invalid_hostnames(true)
      - pattern: reqwest::Client::builder(). ... .danger_accept_invalid_certs(true)
    metadata:
      references:
        - https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.danger_accept_invalid_hostnames
        - https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.danger_accept_invalid_certs
      technology:
        - reqwest
      category: security
      cwe: "CWE-295: Improper Certificate Validation"
      confidence: HIGH
      likelihood: LOW
      impact: MEDIUM
      subcategory: vuln
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - rust
    severity: ERROR

  - id: rust.rustls-dangerous
    message: Dangerous client configuration detected - SSL/TLS certificate verification
     appears to be bypassed. This could expose the application to various attacks,
     such as man-in-the-middle attacks. Please ensure that SSL/TLS certificate
     verification is enabled for all production environments and any environment
     where secure, authenticated communication is required. Bypassing certificate
     verification should only be done in controlled, non-production environments
     for testing purposes.
    pattern-either:
      - pattern: rustls::client::DangerousClientConfig
      - pattern: $CLIENT.dangerous().set_certificate_verifier(...)
      - pattern: |
          let $CLIENT = rustls::client::ClientConfig::dangerous(...);
          ...
          $CLIENT.set_certificate_verifier(...);
    metadata:
      references:
        - https://docs.rs/rustls/latest/rustls/client/struct.DangerousClientConfig.html
        - https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#method.dangerous
      technology:
        - rustls
      category: security
      cwe: "CWE-295: Improper Certificate Validation"
      confidence: HIGH
      likelihood: LOW
      impact: MEDIUM
      subcategory: vuln
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - rust
    severity: ERROR

  - id: rust.ssl-verify-none
    message: SSL verification disabled, this allows for MitM attacks
    pattern: $BUILDER.set_verify(openssl::ssl::SSL_VERIFY_NONE)
    metadata:
      references:
        - https://docs.rs/openssl/latest/openssl/ssl/struct.SslContextBuilder.html#method.set_verify
      technology:
        - openssl
      category: security
      cwe: "CWE-295: Improper Certificate Validation"
      confidence: HIGH
      likelihood: LOW
      impact: MEDIUM
      subcategory: vuln
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - rust
    severity: ERROR

  - id: rust.temp-dir
    message: The use of temp_dir for security-sensitive operations can lead to
     vulnerabilities if not handled properly. According to Rust's documentation,
     the temporary directory can be shared among users or processes with varying
     privileges. Therefore, creating files or directories in the temporary directory
     should be done using a secure method that generates a unique name. Using a fixed
     or predictable name for a file or directory could result in 'insecure temporary
     file' security vulnerabilities.
    pattern: std::env::temp_dir()
    metadata:
      references:
        - https://doc.rust-lang.org/stable/std/env/fn.temp_dir.html
      technology:
        - rust
      category: security
      cwe: "CWE-807: Reliance on Untrusted Inputs in a Security Decision"
      confidence: HIGH
      likelihood: LOW
      impact: LOW
      subcategory: audit
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - rust
    severity: ERROR

  - id: rust.reqwest-set-sensitive
    message: Set sensitive flag on security headers with 'set_sensitive' to treat
      data with special care
    patterns:
      - pattern: |
          let mut $HEADERS = header::HeaderMap::new();
          ...
          let $HEADER_VALUE = <... header::HeaderValue::$FROM_FUNC(...) ...>;
          ...
          $HEADERS.insert($HEADER, $HEADER_VALUE);
      - pattern-not: |
          let mut $HEADERS = header::HeaderMap::new();
          ...
          let $HEADER_VALUE = <... header::HeaderValue::$FROM_FUNC(...) ...>;
          ...
          $HEADER_VALUE.set_sensitive(true);
          ...
          $HEADERS.insert($HEADER, $HEADER_VALUE);
      - metavariable-pattern:
          metavariable: $FROM_FUNC
          pattern-either:
            - pattern: from_static
            - pattern: from_str
            - pattern: from_name
            - pattern: from_bytes
            - pattern: from_maybe_shared
      - metavariable-pattern:
          metavariable: $HEADER
          pattern-either:
            - pattern: header::AUTHORIZATION
            - pattern: '"Authorization"'
    metadata:
      references:
        - https://docs.rs/reqwest/latest/reqwest/header/struct.HeaderValue.html#method.set_sensitive
      technology:
        - reqwest
      category: security
      cwe: "CWE-921: Storage of Sensitive Data in a Mechanism without Access Control"
      confidence: MEDIUM
      likelihood: LOW
      impact: LOW
      subcategory: audit
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - rust
    severity: ERROR

  - id: rust.args-os
    message: 'args_os should not be used for security operations. From the docs:
      "The first element is traditionally the path of the executable, but it can
      be set to arbitrary text, and might not even exist. This means this
      property should not be relied upon for security purposes."'
    pattern: std::env::args_os()
    metadata:
      references:
        - https://doc.rust-lang.org/stable/std/env/fn.args_os.html
      technology:
        - rust
      category: security
      cwe: "CWE-807: Reliance on Untrusted Inputs in a Security Decision"
      confidence: HIGH
      likelihood: LOW
      impact: LOW
      subcategory: audit
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - rust
    severity: ERROR

  - id: rust.current-exe
    message: 'current_exe should not be used for security operations. From the docs:
      "The output of this function should not be trusted for anything that might
      have security implications. Basically, if users can run the executable,
      they can change the output arbitrarily."'
    pattern: std::env::current_exe()
    metadata:
      references:
        - https://doc.rust-lang.org/stable/std/env/fn.current_exe.html#security
      technology:
        - rust
      category: security
      cwe: "CWE-807: Reliance on Untrusted Inputs in a Security Decision"
      confidence: HIGH
      likelihood: LOW
      impact: LOW
      subcategory: audit
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - rust
    severity: ERROR
