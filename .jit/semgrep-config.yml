rules:
  - id: auth-bypass-yii-framework-apps3c
    languages:
      - php
    severity: ERROR
    message: >-
        Authentication and authorization checks are often implemented in
        "beforeAction" functions in Yii framework. When an authentication
        or authorization check is failed, the user is usually redirected to
        a login page or to an exception one. The "beforeAction must return
        "false" also if the user is redirected, otherwise the code protected
        by the "beforeAction" function is executed before the redirection,
        posing a secrious security risk.

    patterns:

        - pattern-inside: |
            function beforeAction(...) {
              ...
            }

        - patterns:

          - pattern: return <... $REDIRECT ...>;

          - metavariable-regex:
              metavariable: $REDIRECT
              regex: (?i)(.*redirect.*)
  - id: insecure-deserialization
    metadata:
      cwe: 'CWE-502'
      owasp: 'A8: Insecure Deserialization'
      references:
        - https://cwe.mitre.org/data/definitions/915.html
        - https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization
        - https://sucuri.net/guides/owasp-top-10-security-vulnerabilities-2020/
    patterns:
      - pattern: $FUNC(...);
      - metavariable-regex:
          metavariable: '$FUNC'
          regex: "(unserialize)"

    message: |
      The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.
    languages: [php]
    severity: ERROR
  - id: simple-sql-injection
    patterns:
      - pattern-regex: '(.*orderByRaw(.*).*|DB::raw.)'
    message: |
      Without sufficient removal or quoting of SQL syntax in user-controllable inputs,
      the generated SQL query can cause those inputs to be interpreted as SQL instead
      of ordinary user data. This can be used to alter query logic to bypass security checks,
      or to insert additional statements that modify the back-end database, possibly
      including execution of system commands.
    metadata:
      cwe: 'CWE-89'
      owasp: 'A1: Injection'
      references:
        - https://cwe.mitre.org/data/definitions/89.html
    languages: [php]
    severity: ERROR
    # Disabling this TEST ID to test runtime issues of the control
  # - id: sql-injection-yii-framework-apps3c
    # languages:
    #   - php
    # severity: ERROR
    # message: >-
    #     Detected a formatted string in a Yii SQL operation with a concatenated
    #     value that came from a function argument. This could lead to SQL
    #     injection if variables in the SQL statement are not properly sanitized.
    # patterns:

    #   - pattern-either:
    #       - pattern-inside: |
    #           function $FUNC(...,$PAR,...) {
    #             ...
    #           }
    #       - pattern-inside: |
    #           function $FUNC(...,$PAR = $PVAL,...) {
    #             ...
    #           }

    #   - pattern-either:

    #     # SELECT WITH PARAM AS ARGUMENT
    #     - pattern: $SELECT([...,$PRE . <... $PAR ...> . $POST,...])
    #     - pattern: $SELECT([...,<... $PAR ...> . $POST,...])
    #     - pattern: $SELECT([...,$PRE . <... $PAR ...>,...])
    #     #- pattern: $SELECT([...,<... $PAR ...>,...]) #Too many false positives
    #     - pattern: $SELECT([...,$PAR,...])

    #     - pattern: $SELECT($PRE . <... $PAR ...> . $POST,...)
    #     - pattern: $SELECT(<... $PAR ...> . $POST,...)
    #     - pattern: $SELECT($PRE . <... $PAR ...>,...)
    #     #- pattern: $SELECT(<... $PAR ...>,...) #Too many false positives
    #     - pattern: $SELECT($PAR,...)

    #     - pattern: $SELECT($PRE . <... $PAR ...> . $POST)
    #     - pattern: $SELECT(<... $PAR ...> . $POST)
    #     - pattern: $SELECT($PRE . <... $PAR ...>)
    #     #- pattern: $SELECT(<... $PAR ...>) #Too many false positives
    #     - pattern: $SELECT($PAR)

    #     - pattern: $AAA->$SELECT([...,$PRE . <... $PAR ...> . $POST,...])
    #     - pattern: $AAA->$SELECT([...,<... $PAR ...> . $POST,...])
    #     - pattern: $AAA->$SELECT([...,$PRE . <... $PAR ...>,...])
    #     #- pattern: $AAA->$SELECT([...,<... $PAR ...>,...]) #Too many false positives
    #     - pattern: $AAA->$SELECT([...,$PAR,...])

    #     - pattern: $AAA->$SELECT($PRE . <... $PAR ...> . $POST,...)
    #     - pattern: $AAA->$SELECT(<... $PAR ...> . $POST,...)
    #     - pattern: $AAA->$SELECT($PRE . <... $PAR ...>,...)
    #     #- pattern: $AAA->$SELECT(<... $PAR ...>,...) #Too many false positives
    #     - pattern: $AAA->$SELECT($PAR,...)

    #     - pattern: $AAA->$SELECT($PRE . <... $PAR ...> . $POST)
    #     - pattern: $AAA->$SELECT(<... $PAR ...> . $POST)
    #     - pattern: $AAA->$SELECT($PRE . <... $PAR ...>)
    #     #- pattern: $AAA->$SELECT(<... $PAR ...>) #Too many false positives
    #     - pattern: $AAA->$SELECT($PAR)

    #     # SELECT WITH ARGUMENT COPIED FROM PARAM (1 time, if >1 times it does not work)
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT($PRE . <... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT(<... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT($PRE . <... $COPY ...>);
    #     #- pattern: |
    #     #      $COPY = $PAR;
    #     #      ...
    #     #      $SELECT(<... $COPY ...>); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT($COPY);

    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT($PRE . <... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT(<... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT($PRE . <... $COPY ...>,...);
    #     #- pattern: |
    #     #      $COPY = $PAR;
    #     #      ...
    #     #      $SELECT(<... $COPY ...>,...); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT($COPY,...);

    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT([...,$PRE . <... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT([...,<... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT([...,$PRE . <... $COPY ...>,...]);
    #     #- pattern: |
    #     #      $COPY = $PAR;
    #     #      ...
    #     #      $SELECT([...,<... $COPY ...>,...]); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $SELECT([...,$COPY,...]);

    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT(<... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...>);
    #     #- pattern: |
    #     #      $COPY = $PAR;
    #     #      ...
    #     #      $AAA->$SELECT(<... $COPY ...>); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT($COPY);

    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT(<... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...>,...);
    #     #- pattern: |
    #     #      $COPY = $PAR;
    #     #      ...
    #     #      $AAA->$SELECT(<... $COPY ...>,...); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT($COPY,...);

    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT([...,$PRE . <... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT([...,<... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT([...,$PRE . <... $COPY ...>,...]);
    #     #- pattern: |
    #     #      $COPY = $PAR;
    #     #      ...
    #     #      $AAA->$SELECT([...,<... $COPY ...>,...]); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR;
    #           ...
    #           $AAA->$SELECT([...,$COPY,...]);

    #     # SELECT WITH ARGUMENT COPIED FROM FIELD OF PARAM WITH -> (1 time, if >1 times it does not work)
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT($PRE . <... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT(<... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT($PRE . <... $COPY ...>);
    #     #- pattern: |
    #     #      $COPY = $PAR->$ARGUM;
    #     #      ...
    #     #      $SELECT(<... $COPY ...>); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT($COPY);

    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT($PRE . <... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT(<... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT($PRE . <... $COPY ...>,...);
    #     #- pattern: |
    #     #      $COPY = $PAR->$ARGUM;
    #     #      ...
    #     #      $SELECT(<... $COPY ...>,...); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT($COPY,...);

    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT([...,$PRE . <... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT([...,<... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT([...,$PRE . <... $COPY ...>,...]);
    #     #- pattern: |
    #     #      $COPY = $PAR->$ARGUM;
    #     #      ...
    #     #      $SELECT([...,<... $COPY ...>,...]); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $SELECT([...,$COPY,...]);

    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT(<... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...>);
    #     #- pattern: |
    #     #      $COPY = $PAR->$ARGUM;
    #     #      ...
    #     #      $AAA->$SELECT(<... $COPY ...>); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT($COPY);

    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT(<... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...>,...);
    #     #- pattern: |
    #     #      $COPY = $PAR->$ARGUM;
    #     #      ...
    #     #      $AAA->$SELECT(<... $COPY ...>,...); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT($COPY,...);


    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT([...,$PRE . <... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT([...,<... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT([...,$PRE . <... $COPY ...>,...]);
    #     #- pattern: |
    #     #      $COPY = $PAR->$ARGUM;
    #     #      ...
    #     #      $AAA->$SELECT([...,<... $COPY ...>,...]); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR->$ARGUM;
    #           ...
    #           $AAA->$SELECT([$COPY,...]);



    #     # SELECT WITH ARGUMENT COPIED FROM FIELD OF PARAM WITH . (1 time, if >1 times it does not work)
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT($PRE . <... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT(<... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT($PRE . <... $COPY ...>);
    #     #- pattern: |
    #     #      $COPY = $PAR.$ARGUM;
    #     #      ...
    #     #      $SELECT(<... $COPY ...>); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT($COPY);

    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT($PRE . <... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT(<... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT($PRE . <... $COPY ...>,...);
    #     #- pattern: |
    #     #      $COPY = $PAR.$ARGUM;
    #     #      ...
    #     #      $SELECT(<... $COPY ...>,...); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT($COPY,...);

    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT([...,$PRE . <... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT([...,<... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT([...,$PRE . <... $COPY ...>,...]);
    #     #- pattern: |
    #     #      $COPY = $PAR.$ARGUM;
    #     #      ...
    #     #      $SELECT([...,<... $COPY ...>,...]); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $SELECT([...,$COPY,...]);

    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT(<... $COPY ...> . $POST);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...>);
    #     #- pattern: |
    #     #      $COPY = $PAR.$ARGUM;
    #     #      ...
    #     #      $AAA->$SELECT(<... $COPY ...>); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT($COPY);

    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT(<... $COPY ...> . $POST,...);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT($PRE . <... $COPY ...>,...);
    #     #- pattern: |
    #     #      $COPY = $PAR.$ARGUM;
    #     #      ...
    #     #      $AAA->$SELECT(<... $COPY ...>,...); #Too many false positives
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT($COPY,...);

    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT([...,$PRE . <... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT([...,<... $COPY ...> . $POST,...]);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT([...,$PRE . <... $COPY ...>,...]);
    #     - pattern: |
    #           $COPY = $PAR.$ARGUM;
    #           ...
    #           $AAA->$SELECT([...,$COPY,...]);

    #   - metavariable-regex:
    #       metavariable: $SELECT
    #       regex: (?is)^["']+\s*(select |insert |update |delete |selectDistinct |from |where |andWhere |orWhere |join |leftJoin |rightJoin |crossJoin |naturalJoin |group |having |order |orderBy |limit |offset |union ).*["']+
  - id: assert-use
    mode: taint
    pattern-sources:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern: $_GET
                  - pattern: $_POST
                  - pattern: $_COOKIE
                  - pattern: $_REQUEST
                  - pattern: $_SERVER
          - patterns:
              - pattern: |
                  Route::$METHOD($ROUTENAME, function(..., $ARG, ...) { ... })
              - focus-metavariable: $ARG
    pattern-sinks:
      - patterns:
          - pattern: assert($SINK, ...);
          - pattern-not: assert("...", ...);
          - pattern: $SINK
    message: Calling assert with user input is equivalent to eval'ing.
    metadata:
      owasp:
        - A03:2021 - Injection
      cwe:
        - "CWE-95: Improper Neutralization of Directives in Dynamically
          Evaluated Code ('Eval Injection')"
      references:
        - https://www.php.net/manual/en/function.assert
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php
      category: security
      technology:
        - php
      confidence: HIGH
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR
  - id: assert-use-audit
    patterns:
      - pattern: assert($ASSERT, ...);
      - pattern-not: assert("...", ...);
      - metavariable-regex:
          metavariable: $ASSERT
          regex: \A\$[A-Za-z\[\]\-_'"\$]+(\-\>\w+)?\Z
    message: Calling assert with user input is equivalent to eval'ing.
    metadata:
      owasp:
        - A03:2021 - Injection
      cwe:
        - "CWE-95: Improper Neutralization of Directives in Dynamically
          Evaluated Code ('Eval Injection')"
      references:
        - https://www.php.net/manual/en/function.assert
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php
      category: security
      technology:
        - php
      confidence: LOW
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR
  - id: backticks-use
    pattern: "`...`;"
    message: Backticks use may lead to command injection vulnerabilities.
    metadata:
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      references:
        - https://www.php.net/manual/en/language.operators.execution.php
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/BackticksSniff.php
      category: security
      technology:
        - php
      owasp:
        - A03:2021 - Injection
      cwe2022-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR
  - id: extract-user-data
    mode: taint
    pattern-sources:
      - pattern-either:
          - pattern: $_GET[...]
          - pattern: $_FILES[...]
          - pattern: $_POST[...]
    pattern-sinks:
      - pattern: extract(...)
    pattern-sanitizers:
      - pattern: extract($VAR, EXTR_SKIP,...)
    message: Do not call 'extract()' on user-controllable data. If you must, then
      you must also provide the EXTR_SKIP flag to prevent overwriting existing
      variables.
    languages:
      - php
    metadata:
      category: security
      cwe:
        - "CWE-502: Deserialization of Untrusted Data"
      owasp:
        - A08:2017 - Insecure Deserialization
        - A08:2021 - Software and Data Integrity Failures
      technology:
        - php
      references:
        - https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - "Insecure Deserialization "
    severity: ERROR
  - id: eval-use
    patterns:
      - pattern: eval(...);
      - pattern-not: eval('...');
    message: Evaluating non-constant commands. This can lead to command injection.
    metadata:
      cwe:
        - "CWE-78: Improper Neutralization of Special Elements used in an OS
          Command ('OS Command Injection')"
      references:
        - https://www.php.net/manual/en/function.eval
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php
      category: security
      technology:
        - php
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Command Injection
    languages:
      - php
    severity: ERROR
  - id: exec-use
    patterns:
      - pattern: $FUNC(...);
      - pattern-not: $FUNC('...', ...);
      - metavariable-regex:
          metavariable: $FUNC
          regex: exec|passthru|proc_open|popen|shell_exec|system|pcntl_exec
    message: Executing non-constant commands. This can lead to command injection.
    metadata:
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      references:
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php
      category: security
      technology:
        - php
      owasp:
        - A03:2021 - Injection
      cwe2022-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR
  - id: file-inclusion
    message: Detected non-constant file inclusion. This can lead to local file
      inclusion (LFI) or remote file inclusion (RFI) if user input reaches this
      statement. LFI and RFI could lead to sensitive files being obtained by
      attackers. Instead, explicitly specify what to include. If that is not a
      viable solution, validate user input thoroughly.
    metadata:
      cwe:
        - "CWE-98: Improper Control of Filename for Include/Require Statement in
          PHP Program ('PHP Remote File Inclusion')"
      references:
        - https://www.php.net/manual/en/function.include.php
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php
        - https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion
      category: security
      technology:
        - php
      owasp:
        - A03:2021 - Injection
      subcategory:
        - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: $_GET
              - pattern: $_POST
              - pattern: $_COOKIE
              - pattern: $_REQUEST
              - pattern: $_SERVER
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: basename($PATH, ...)
              - pattern-inside: linkinfo($PATH, ...)
              - pattern-inside: readlink($PATH, ...)
              - pattern-inside: realpath($PATH, ...)
              - pattern-inside: include_safe(...)
    pattern-sinks:
      - patterns:
          - pattern-inside: $FUNC(...);
          - pattern: $VAR
          - metavariable-regex:
              metavariable: $FUNC
              regex: \b(include|include_once|require|require_once)\b
  - id: ftp-use
    patterns:
      - pattern: $FUNC(...);
      - metavariable-regex:
          metavariable: $FUNC
          regex: ftp_.+
    message: FTP allows for unencrypted file transfers. Consider using an encrypted
      alternative.
    metadata:
      cwe:
        - "CWE-319: Cleartext Transmission of Sensitive Information"
      references:
        - https://www.php.net/manual/en/intro.ftp.php
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/FringeFunctionsSniff.php
      category: security
      technology:
        - php
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      subcategory:
        - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - php
    severity: ERROR
  - id: echoed-request
    mode: taint
    message: "`Echo`ing user input risks cross-site scripting vulnerability. You
      should use `htmlentities()` when showing data to users."
    languages:
      - php
    severity: ERROR
    pattern-sources:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
    pattern-sinks:
      - pattern: echo ...;
    pattern-sanitizers:
      - pattern: isset(...)
      - pattern: empty(...)
      - pattern: $X = $ANYFUNC(...);
      - patterns:
          - pattern-inside: echo <... $ANYFUNC(...) ...>;
          - pattern: $ANYFUNC(...)
    metadata:
      technology:
        - php
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      category: security
      references:
        - https://www.php.net/manual/en/function.htmlentities.php
        - https://www.php.net/manual/en/reserved.variables.request.php
        - https://www.php.net/manual/en/reserved.variables.post.php
        - https://www.php.net/manual/en/reserved.variables.get.php
        - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
  - id: tainted-sql-string
    languages:
    - php
    severity: ERROR
    message: User data flows into this manually-constructed SQL string. User data can be safely inserted
      into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed
      SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate
      data from the database. Instead, use prepared statements (`$mysqli->prepare("INSERT INTO test(id,
      label) VALUES (?, ?)");`) or a safe library.
    metadata:
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      references:
      - https://owasp.org/www-community/attacks/SQL_Injection
      category: security
      technology:
      - php
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
    mode: taint
    pattern-sanitizers:
    - pattern-either:
      - pattern: mysqli_real_escape_string(...)
      - pattern: real_escape_string(...)
      - pattern: $MYSQLI->real_escape_string(...)
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: $_GET
        - pattern: $_POST
        - pattern: $_COOKIE
        - pattern: $_REQUEST
    pattern-sinks:
    - pattern-either:
      - patterns:
        - pattern: |
            sprintf($SQLSTR, ...)
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
      - patterns:
        - pattern: |
            "...$EXPR..."
        - metavariable-regex:
            metavariable: $EXPR
            regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
      - patterns:
        - pattern: |
            "$SQLSTR".$EXPR
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
  - id: mb-ereg-replace-eval
    patterns:
      - pattern: mb_ereg_replace($PATTERN, $REPL, $STR, $OPTIONS);
      - pattern-not: mb_ereg_replace($PATTERN, $REPL, $STR, "...");
    message: Calling mb_ereg_replace with user input in the options can lead to
      arbitrary code execution. The eval modifier (`e`) evaluates the
      replacement argument as code.
    metadata:
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      references:
        - https://www.php.net/manual/en/function.mb-ereg-replace.php
        - https://www.php.net/manual/en/function.mb-regex-set-options.php
      category: security
      technology:
        - php
      owasp:
        - A03:2021 - Injection
      cwe2022-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR
  - id: openssl-cbc-static-iv
    patterns:
      - pattern-either:
          - pattern: openssl_encrypt($D, $M, $K, $FLAGS, "...",...);
          - pattern: openssl_decrypt($D, $M, $K, $FLAGS, "...",...);
      - metavariable-comparison:
          metavariable: $M
          comparison: re.match(".*-CBC",$M)
    message: Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext
      attacks against encrypted data.
    languages:
      - php
    severity: ERROR
    metadata:
      cwe:
        - "CWE-329: Generation of Predictable IV with CBC Mode"
      references:
        - https://csrc.nist.gov/publications/detail/sp/800-38a/final
      owasp:
        - A02:2021 - Cryptographic Failures
      technology:
        - php
        - openssl
      category: security
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Cryptographic Issues
  - id: php-ssrf
    patterns:
      - pattern-either:
          - pattern: |
              $VAR=$DATA;
              ...
              $FUNCS(...,$VAR, ...);
          - pattern: $FUNCS(...,$DATA, ...);
      - metavariable-pattern:
          metavariable: $DATA
          patterns:
            - pattern-either:
                - pattern: $_GET
                - pattern: $_POST
                - pattern: $_COOKIE
                - pattern: $_REQUEST
      - metavariable-pattern:
          metavariable: $FUNCS
          patterns:
            - pattern-either:
                - pattern: curl_setopt
                - pattern: fopen
                - pattern: file_get_contents
                - pattern: curl_init
                - pattern: readfile
    message: The web server receives a URL or similar request from an upstream
      component and retrieves the contents of this URL, but it does not
      sufficiently ensure that the request is being sent to the expected
      destination. Dangerous function $FUNCS with payload $DATA
    metadata:
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      cwe:
        - "CWE-918: Server-Side Request Forgery (SSRF)"
      category: security
      technology:
        - php
      owasp:
        - A10:2021 - Server-Side Request Forgery (SSRF)
      cwe2022-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
      vulnerability_class:
        - Server-Side Request Forgery (SSRF)
    languages:
      - php
    severity: ERROR
  - id: phpinfo-use
    pattern: phpinfo(...);
    message: The 'phpinfo' function may reveal sensitive information about your
      environment.
    metadata:
      cwe:
        - "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
      references:
        - https://www.php.net/manual/en/function.phpinfo
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php
      category: security
      technology:
        - php
      owasp:
        - A01:2021 - Broken Access Control
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - php
    severity: ERROR
  - id: preg-replace-eval
    patterns:
      - pattern: a()
      - pattern: b()
    message: This rule has been deprecated, see
      https://github.com/returntocorp/semgrep-rules/issues/2506.
    metadata:
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      references:
        - https://www.php.net/manual/en/function.preg-replace.php
        - https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PregReplaceSniff.php
      category: security
      deprecated: true
      technology:
        - php
      owasp:
        - A03:2021 - Injection
      cwe2022-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR
  - id: weak-crypto
    patterns:
      - pattern: $FUNC(...);
      - metavariable-regex:
          metavariable: $FUNC
          regex: crypt|md5|md5_file|sha1|sha1_file|str_rot13
    message: Detected usage of weak crypto function. Consider using stronger
      alternatives.
    metadata:
      cwe:
        - "CWE-328: Use of Weak Hash"
      references:
        - https://www.php.net/manual/en/book.sodium.php
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php
      category: security
      technology:
        - php
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      subcategory:
        - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Insecure Hashing Algorithm
    languages:
      - php
    severity: ERROR
  - id: laravel-dangerous-model-construction
    patterns:
      - pattern: |
          $guarded = [];
      - pattern-inside: |
          class $CLASS extends Model {
            ...
          }
    message: Setting `$guarded` to an empty array allows mass assignment to every
      property in a Laravel model. This explicitly overrides Eloquent's
      safe-by-default mass assignment protections.
    languages:
      - php
    metadata:
      category: security
      technology:
        - php
        - laravel
        - eloquent
      references:
        - https://laravel.com/docs/9.x/eloquent#allowing-mass-assignment
        - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md
      cwe:
        - "CWE-915: Improperly Controlled Modification of Dynamically-Determined
          Object Attributes"
      owasp:
        - A08:2021 - Software and Data Integrity Failures
      subcategory:
        - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Mass Assignment
    severity: ERROR
  - id: laravel-unsafe-validator
    mode: taint
    pattern-sources:
      - patterns:
          - pattern: |
              public function $F(...,Request $R,...){...}
          - focus-metavariable: $R
      - patterns:
          - pattern-either:
              - pattern: |
                  $this->$PROPERTY
              - pattern: |
                  $this->$PROPERTY->$GET
          - metavariable-pattern:
              metavariable: $PROPERTY
              patterns:
                - pattern-either:
                    - pattern: query
                    - pattern: request
                    - pattern: headers
                    - pattern: cookies
                    - pattern: cookie
                    - pattern: files
                    - pattern: file
                    - pattern: allFiles
                    - pattern: input
                    - pattern: all
                    - pattern: post
                    - pattern: json
          - pattern-either:
              - pattern-inside: |
                  class $CL extends Illuminate\Http\Request {...}
              - pattern-inside: |
                  class $CL extends Illuminate\Foundation\Http\FormRequest {...}
    pattern-sinks:
      - patterns:
          - pattern: |
              Illuminate\Validation\Rule::unique(...)->ignore(...,$IGNORE,...)
          - focus-metavariable: $IGNORE
    message: Found a request argument passed to an `ignore()` definition in a Rule
      constraint. This can lead to SQL injection.
    languages:
      - php
    severity: ERROR
    metadata:
      category: security
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      technology:
        - php
        - laravel
      references:
        - https://laravel.com/docs/9.x/validation#rule-unique
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - SQL Injection
  - id: tainted-filename
    severity: ERROR
    message: >-
      File name based on user input risks server-side request forgery.
    metadata:
      technology:
      - php
      category: security
      cwe:
      - 'CWE-918: Server-Side Request Forgery (SSRF)'
      owasp:
      - A10:2021 - Server-Side Request Forgery (SSRF)
      references:
      - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      impact: MEDIUM
      likelihood: MEDIUM
      confidence: MEDIUM
    languages: [php]
    mode: taint
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: $_GET
        - pattern: $_POST
        - pattern: $_COOKIE
        - pattern: $_REQUEST
        - pattern: $_SERVER
    pattern-sanitizers:
    - patterns:
      - pattern-either:
        - pattern-inside: basename($PATH, ...)
        - pattern-inside: linkinfo($PATH, ...)
        - pattern-inside: readlink($PATH, ...)
        - pattern-inside: realpath($PATH, ...)
    pattern-sinks:
    - patterns:
      - pattern-either:
        - pattern-inside: opcache_compile_file($FILENAME, ...)
        - pattern-inside: opcache_invalidate($FILENAME, ...)
        - pattern-inside: opcache_is_script_cached($FILENAME, ...)
        - pattern-inside: runkit7_import($FILENAME, ...)
        - pattern-inside: readline_read_history($FILENAME, ...)
        - pattern-inside: readline_write_history($FILENAME, ...)
        - pattern-inside: rar_open($FILENAME, ...)
        - pattern-inside: zip_open($FILENAME, ...)
        - pattern-inside: gzfile($FILENAME, ...)
        - pattern-inside: gzopen($FILENAME, ...)
        - pattern-inside: readgzfile($FILENAME, ...)
        - pattern-inside: hash_file($ALGO, $FILENAME, ...)
        - pattern-inside: hash_update_file($CONTEXT, $FILENAME, ...)
        - pattern-inside: pg_trace($FILENAME, ...)
        - pattern-inside: dio_open($FILENAME, ...)
        - pattern-inside: finfo_file($FINFO, $FILENAME, ...)
        - pattern-inside: mime_content_type($FILENAME, ...)
        - pattern-inside: chgrp($FILENAME, ...)
        - pattern-inside: chmod($FILENAME, ...)
        - pattern-inside: chown($FILENAME, ...)
        - pattern-inside: clearstatcache($CLEAR_REALPATH_CACHE, $FILENAME, ...)
        - pattern-inside: file_exists($FILENAME, ...)
        - pattern-inside: file_get_contents($FILENAME, ...)
        - pattern-inside: file_put_contents($FILENAME, ...)
        - pattern-inside: file($FILENAME, ...)
        - pattern-inside: fileatime($FILENAME, ...)
        - pattern-inside: filectime($FILENAME, ...)
        - pattern-inside: filegroup($FILENAME, ...)
        - pattern-inside: fileinode($FILENAME, ...)
        - pattern-inside: filemtime($FILENAME, ...)
        - pattern-inside: fileowner($FILENAME, ...)
        - pattern-inside: fileperms($FILENAME, ...)
        - pattern-inside: filesize($FILENAME, ...)
        - pattern-inside: filetype($FILENAME, ...)
        - pattern-inside: fnmatch($PATTERN, $FILENAME, ...)
        - pattern-inside: fopen($FILENAME, ...)
        - pattern-inside: is_dir($FILENAME, ...)
        - pattern-inside: is_executable($FILENAME, ...)
        - pattern-inside: is_file($FILENAME, ...)
        - pattern-inside: is_link($FILENAME, ...)
        - pattern-inside: is_readable($FILENAME, ...)
        - pattern-inside: is_uploaded_file($FILENAME, ...)
        - pattern-inside: is_writable($FILENAME, ...)
        - pattern-inside: lchgrp($FILENAME, ...)
        - pattern-inside: lchown($FILENAME, ...)
        - pattern-inside: lstat($FILENAME, ...)
        - pattern-inside: parse_ini_file($FILENAME, ...)
        - pattern-inside: readfile($FILENAME, ...)
        - pattern-inside: stat($FILENAME, ...)
        - pattern-inside: touch($FILENAME, ...)
        - pattern-inside: unlink($FILENAME, ...)
        - pattern-inside: xattr_get($FILENAME, ...)
        - pattern-inside: xattr_list($FILENAME, ...)
        - pattern-inside: xattr_remove($FILENAME, ...)
        - pattern-inside: xattr_set($FILENAME, ...)
        - pattern-inside: xattr_supported($FILENAME, ...)
        - pattern-inside: enchant_broker_request_pwl_dict($BROKER, $FILENAME, ...)
        - pattern-inside: pspell_config_personal($CONFIG, $FILENAME, ...)
        - pattern-inside: pspell_config_repl($CONFIG, $FILENAME, ...)
        - pattern-inside: pspell_new_personal($FILENAME, ...)
        - pattern-inside: exif_imagetype($FILENAME, ...)
        - pattern-inside: getimagesize($FILENAME, ...)
        - pattern-inside: image2wbmp($IMAGE, $FILENAME, ...)
        - pattern-inside: imagecreatefromavif($FILENAME, ...)
        - pattern-inside: imagecreatefrombmp($FILENAME, ...)
        - pattern-inside: imagecreatefromgd2($FILENAME, ...)
        - pattern-inside: imagecreatefromgd2part($FILENAME, ...)
        - pattern-inside: imagecreatefromgd($FILENAME, ...)
        - pattern-inside: imagecreatefromgif($FILENAME, ...)
        - pattern-inside: imagecreatefromjpeg($FILENAME, ...)
        - pattern-inside: imagecreatefrompng($FILENAME, ...)
        - pattern-inside: imagecreatefromtga($FILENAME, ...)
        - pattern-inside: imagecreatefromwbmp($FILENAME, ...)
        - pattern-inside: imagecreatefromwebp($FILENAME, ...)
        - pattern-inside: imagecreatefromxbm($FILENAME, ...)
        - pattern-inside: imagecreatefromxpm($FILENAME, ...)
        - pattern-inside: imageloadfont($FILENAME, ...)
        - pattern-inside: imagexbm($IMAGE, $FILENAME, ...)
        - pattern-inside: iptcembed($IPTC_DATA, $FILENAME, ...)
        - pattern-inside: mailparse_msg_extract_part_file($MIMEMAIL, $FILENAME, ...)
        - pattern-inside: mailparse_msg_extract_whole_part_file($MIMEMAIL, $FILENAME, ...)
        - pattern-inside: mailparse_msg_parse_file($FILENAME, ...)
        - pattern-inside: fdf_add_template($FDF_DOCUMENT, $NEWPAGE, $FILENAME, ...)
        - pattern-inside: fdf_get_ap($FDF_DOCUMENT, $FIELD, $FACE, $FILENAME, ...)
        - pattern-inside: fdf_open($FILENAME, ...)
        - pattern-inside: fdf_save($FDF_DOCUMENT, $FILENAME, ...)
        - pattern-inside: fdf_set_ap($FDF_DOCUMENT, $FIELD_NAME, $FACE, $FILENAME, ...)
        - pattern-inside: ps_add_launchlink($PSDOC, $LLX, $LLY, $URX, $URY, $FILENAME, ...)
        - pattern-inside: ps_add_pdflink($PSDOC, $LLX, $LLY, $URX, $URY, $FILENAME, ...)
        - pattern-inside: ps_open_file($PSDOC, $FILENAME, ...)
        - pattern-inside: ps_open_image_file($PSDOC, $TYPE, $FILENAME, ...)
        - pattern-inside: posix_access($FILENAME, ...)
        - pattern-inside: posix_mkfifo($FILENAME, ...)
        - pattern-inside: posix_mknod($FILENAME, ...)
        - pattern-inside: ftok($FILENAME, ...)
        - pattern-inside: fann_cascadetrain_on_file($ANN, $FILENAME, ...)
        - pattern-inside: fann_read_train_from_file($FILENAME, ...)
        - pattern-inside: fann_train_on_file($ANN, $FILENAME, ...)
        - pattern-inside: highlight_file($FILENAME, ...)
        - pattern-inside: php_strip_whitespace($FILENAME, ...)
        - pattern-inside: stream_resolve_include_path($FILENAME, ...)
        - pattern-inside: swoole_async_read($FILENAME, ...)
        - pattern-inside: swoole_async_readfile($FILENAME, ...)
        - pattern-inside: swoole_async_write($FILENAME, ...)
        - pattern-inside: swoole_async_writefile($FILENAME, ...)
        - pattern-inside: swoole_load_module($FILENAME, ...)
        - pattern-inside: tidy_parse_file($FILENAME, ...)
        - pattern-inside: tidy_repair_file($FILENAME, ...)
        - pattern-inside: get_meta_tags($FILENAME, ...)
        - pattern-inside: yaml_emit_file($FILENAME, ...)
        - pattern-inside: yaml_parse_file($FILENAME, ...)
        - pattern-inside: curl_file_create($FILENAME, ...)
        - pattern-inside: ftp_chmod($FTP, $PERMISSIONS, $FILENAME, ...)
        - pattern-inside: ftp_delete($FTP, $FILENAME, ...)
        - pattern-inside: ftp_mdtm($FTP, $FILENAME, ...)
        - pattern-inside: ftp_size($FTP, $FILENAME, ...)
        - pattern-inside: rrd_create($FILENAME, ...)
        - pattern-inside: rrd_fetch($FILENAME, ...)
        - pattern-inside: rrd_graph($FILENAME, ...)
        - pattern-inside: rrd_info($FILENAME, ...)
        - pattern-inside: rrd_last($FILENAME, ...)
        - pattern-inside: rrd_lastupdate($FILENAME, ...)
        - pattern-inside: rrd_tune($FILENAME, ...)
        - pattern-inside: rrd_update($FILENAME, ...)
        - pattern-inside: snmp_read_mib($FILENAME, ...)
        - pattern-inside: ssh2_sftp_chmod($SFTP, $FILENAME, ...)
        - pattern-inside: ssh2_sftp_realpath($SFTP, $FILENAME, ...)
        - pattern-inside: ssh2_sftp_unlink($SFTP, $FILENAME, ...)
        - pattern-inside: apache_lookup_uri($FILENAME, ...)
        - pattern-inside: md5_file($FILENAME, ...)
        - pattern-inside: sha1_file($FILENAME, ...)
        - pattern-inside: simplexml_load_file($FILENAME, ...)
      - pattern: $FILENAME
  - id: tainted-url-host
    languages:
    - php
    severity: ERROR
    message: >-
      User data flows into the host portion of this manually-constructed URL. This could allow an attacker
      to send data
      to their own server, potentially exposing sensitive data such as cookies or authorization information
      sent with this request.
      They could also probe internal servers or other resources that the server runnig this code can access.
      (This is called
      server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist
      for approved hosts hardcode
      the correct host.
    metadata:
      cwe:
      - 'CWE-918: Server-Side Request Forgery (SSRF)'
      owasp:
      - A10:2021 - Server-Side Request Forgery (SSRF)
      references:
      - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
      category: security
      technology:
      - php
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      impact: MEDIUM
      likelihood: MEDIUM
      confidence: MEDIUM
    mode: taint
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: $_GET
        - pattern: $_POST
        - pattern: $_COOKIE
        - pattern: $_REQUEST
    pattern-sinks:
    - pattern-either:
      - patterns:
        - pattern: |
            sprintf($URLSTR, ...)
        - metavariable-pattern:
            metavariable: $URLSTR
            language: generic
            pattern: $SCHEME://%s
      - patterns:
        - pattern: |
            "...{$EXPR}..."
        - pattern-regex: |
            .*://\{.*
      - patterns:
        - pattern: |
            "...$EXPR..."
        - pattern-regex: |
            .*://\$.*
      - patterns:
        - pattern: |
            "...".$EXPR
        - pattern-regex: |
            .*://["'].*
  - id: doctrine-dbal-dangerous-query
    languages:
    - php
    message: Detected string concatenation with a non-literal variable in a Doctrine DBAL query method.
      This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In
      order to prevent SQL injection, use parameterized queries or prepared statements instead.
    metadata:
      category: security
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      references:
      - https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html
      - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
      technology:
      - doctrine
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
    patterns:
    - pattern-either:
      - pattern: $CONNECTION->prepare($QUERY,...)
      - pattern: $CONNECTION->createQuery($QUERY,...)
      - pattern: $CONNECTION->executeQuery($QUERY,...)
    - pattern-either:
      - pattern-inside: |
          use Doctrine\DBAL\Connection;
          ...
      - pattern-inside: |
          $CONNECTION = $SMTH->getConnection(...);
          ...
    - pattern-not: $CONNECTION->prepare("...",...)
    - pattern-not: $CONNECTION->createQuery("...",...)
    - pattern-not: $CONNECTION->executeQuery("...",...)
    severity: ERROR
  - id: doctrine-orm-dangerous-query
    languages:
    - php
    message: >-
      `$QUERY` Detected string concatenation with a non-literal variable in a Doctrine
      QueryBuilder method. This could lead to SQL injection if the variable is
      user-controlled and not properly sanitized. In order to prevent SQL
      injection, use parameterized queries or prepared statements instead.
    metadata:
      category: security
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      references:
      - https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection
      - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
      technology:
      - doctrine
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
    mode: taint
    pattern-sinks:
    - patterns:
      - focus-metavariable: $SINK
      - pattern-either:
        - pattern: $QUERY->add(...,$SINK,...)
        - pattern: $QUERY->select(...,$SINK,...)
        - pattern: $QUERY->addSelect(...,$SINK,...)
        - pattern: $QUERY->delete(...,$SINK,...)
        - pattern: $QUERY->update(...,$SINK,...)
        - pattern: $QUERY->insert(...,$SINK,...)
        - pattern: $QUERY->from(...,$SINK,...)
        - pattern: $QUERY->join(...,$SINK,...)
        - pattern: $QUERY->innerJoin(...,$SINK,...)
        - pattern: $QUERY->leftJoin(...,$SINK,...)
        - pattern: $QUERY->rightJoin(...,$SINK,...)
        - pattern: $QUERY->where(...,$SINK,...)
        - pattern: $QUERY->andWhere(...,$SINK,...)
        - pattern: $QUERY->orWhere(...,$SINK,...)
        - pattern: $QUERY->groupBy(...,$SINK,...)
        - pattern: $QUERY->addGroupBy(...,$SINK,...)
        - pattern: $QUERY->having(...,$SINK,...)
        - pattern: $QUERY->andHaving(...,$SINK,...)
        - pattern: $QUERY->orHaving(...,$SINK,...)
        - pattern: $QUERY->orderBy(...,$SINK,...)
        - pattern: $QUERY->addOrderBy(...,$SINK,...)
        - pattern: $QUERY->set($SINK,...)
        - pattern: $QUERY->setValue($SINK,...)
      - pattern-either:
        - pattern-inside: |
            $Q = $X->createQueryBuilder();
            ...
        - pattern-inside: |
            $Q = new QueryBuilder(...);
            ...
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: sprintf(...)
        - pattern: |
            "...".$SMTH
    severity: ERROR
  # Disabling this TEST ID to test runtime issues of the control
  # - id: laravel-sql-injection
  #   metadata:
  #     owasp:
  #     - A01:2017 - Injection
  #     - A03:2021 - Injection
  #     cwe:
  #     - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
  #     category: security
  #     technology:
  #     - laravel
  #     references:
  #     - https://laravel.com/docs/8.x/queries
  #     cwe2022-top25: true
  #     cwe2021-top25: true
  #     subcategory:
  #     - vuln
  #     likelihood: HIGH
  #     impact: MEDIUM
  #     confidence: MEDIUM
  #   severity: ERROR
  #   message: >-
  #     Detected a SQL query based on user input.
  #     This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated
  #     by attackers. Instead, use parameterized queries and prepared statements.
  #   languages: [php]
  #   mode: taint
  #   pattern-sources:
  #   - patterns:
  #     - pattern-either:
  #       - pattern: $_GET
  #       - pattern: $_POST
  #       - pattern: $_COOKIE
  #       - pattern: $_REQUEST
  #       - pattern: $_SERVER
  #   pattern-sinks:
  #   - patterns:
  #     - pattern-either:
  #       - patterns:
  #         - pattern: $SQL
  #         - pattern-either:
  #           - pattern-inside: DB::table(...)->whereRaw($SQL, ...)
  #           - pattern-inside: DB::table(...)->orWhereRaw($SQL, ...)
  #           - pattern-inside: DB::table(...)->groupByRaw($SQL, ...)
  #           - pattern-inside: DB::table(...)->havingRaw($SQL, ...)
  #           - pattern-inside: DB::table(...)->orHavingRaw($SQL, ...)
  #           - pattern-inside: DB::table(...)->orderByRaw($SQL, ...)
  #       - patterns:
  #         - pattern: $EXPRESSION
  #         - pattern-either:
  #           - pattern-inside: DB::table(...)->selectRaw($EXPRESSION, ...)
  #           - pattern-inside: DB::table(...)->fromRaw($EXPRESSION, ...)
  #       - patterns:
  #         - pattern: $COLUMNS
  #         - pattern-either:
  #           - pattern-inside: DB::table(...)->whereNull($COLUMNS, ...)
  #           - pattern-inside: DB::table(...)->orWhereNull($COLUMN)
  #           - pattern-inside: DB::table(...)->whereNotNull($COLUMNS, ...)
  #           - pattern-inside: DB::table(...)->whereRowValues($COLUMNS, ...)
  #           - pattern-inside: DB::table(...)->orWhereRowValues($COLUMNS, ...)
  #           - pattern-inside: DB::table(...)->find($ID, $COLUMNS)
  #           - pattern-inside: DB::table(...)->paginate($PERPAGE, $COLUMNS, ...)
  #           - pattern-inside: DB::table(...)->simplePaginate($PERPAGE, $COLUMNS, ...)
  #           - pattern-inside: DB::table(...)->cursorPaginate($PERPAGE, $COLUMNS, ...)
  #           - pattern-inside: DB::table(...)->getCountForPagination($COLUMNS)
  #           - pattern-inside: DB::table(...)->aggregate($FUNCTION, $COLUMNS)
  #           - pattern-inside: DB::table(...)->numericAggregate($FUNCTION, $COLUMNS)
  #           - pattern-inside: DB::table(...)->insertUsing($COLUMNS, ...)
  #           - pattern-inside: DB::table(...)->select($COLUMNS)
  #           - pattern-inside: DB::table(...)->get($COLUMNS)
  #           - pattern-inside: DB::table(...)->count($COLUMNS)
  #       - patterns:
  #         - pattern: $COLUMN
  #         - pattern-either:
  #           - pattern-inside: DB::table(...)->whereIn($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereIn($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereNotIn($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereNotIn($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereIntegerInRaw($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereIntegerInRaw($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereIntegerNotInRaw($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereIntegerNotInRaw($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereBetweenColumns($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereBetween($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereBetweenColumns($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereNotBetween($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereNotBetweenColumns($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereNotBetween($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereNotBetweenColumns($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereNotNull($COLUMN)
  #           - pattern-inside: DB::table(...)->whereDate($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereDate($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereTime($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereTime($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereDay($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereDay($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereMonth($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereMonth($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereYear($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereYear($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereJsonContains($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereJsonContains($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereJsonDoesntContain($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereJsonDoesntContain($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->whereJsonLength($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhereJsonLength($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->having($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orHaving($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->havingBetween($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orderBy($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orderByDesc($COLUMN)
  #           - pattern-inside: DB::table(...)->latest($COLUMN)
  #           - pattern-inside: DB::table(...)->oldest($COLUMN)
  #           - pattern-inside: DB::table(...)->forPageBeforeId($PERPAGE, $LASTID, $COLUMN)
  #           - pattern-inside: DB::table(...)->forPageAfterId($PERPAGE, $LASTID, $COLUMN)
  #           - pattern-inside: DB::table(...)->value($COLUMN)
  #           - pattern-inside: DB::table(...)->pluck($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->implode($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->min($COLUMN)
  #           - pattern-inside: DB::table(...)->max($COLUMN)
  #           - pattern-inside: DB::table(...)->sum($COLUMN)
  #           - pattern-inside: DB::table(...)->avg($COLUMN)
  #           - pattern-inside: DB::table(...)->average($COLUMN)
  #           - pattern-inside: DB::table(...)->increment($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->decrement($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->where($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->orWhere($COLUMN, ...)
  #           - pattern-inside: DB::table(...)->addSelect($COLUMN)
  #       - patterns:
  #         - pattern: $QUERY
  #         - pattern-inside: DB::unprepared($QUERY)
  - id: laravel-api-route-sql-injection
    mode: taint
    pattern-sources:
    - patterns:
      - focus-metavariable: $ARG
      - pattern-inside: |
          Route::$METHOD($ROUTE_NAME, function(...,$ARG,...){...})
    pattern-sanitizers:
    - patterns:
      - pattern: |
          DB::raw("...",[...])
    pattern-sinks:
    - patterns:
      - pattern: |
          DB::raw(...)
    message: HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string
      concatenation or unsafe interpolation.
    languages:
    - php
    severity: ERROR
    metadata:
      category: security
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      references:
      - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md
      technology:
      - php
      - laravel
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
  - id: wp-sql-injection-audit
    patterns:
      - pattern-either:
          - pattern: $wpdb->query(...)
          - pattern: $wpdb->get_var(...)
          - pattern: $wpdb->get_row(...)
          - pattern: $wpdb->get_col(...)
          - pattern: $wpdb->get_results(...)
          - pattern: $wpdb->replace(...)
      - pattern-not: $wpdb->prepare(...)
      - pattern-not: $wpdb->delete(...)
      - pattern-not: $wpdb->update(...)
      - pattern-not: $wpdb->insert(...)
    message: >-
      Detected unsafe API methods. This could lead to SQL Injection if the
      used variable in the functions are user controlled and not properly
      escaped or sanitized. In order to prevent SQL Injection, use safe api
      methods like "$wpdb->prepare" properly or escape/sanitize the data
      properly.
    paths:
      include:
        - wp-content/plugins/**/*.php
    languages:
      - php
    severity: ERROR
    metadata:
      confidence: LOW
      likelihood: LOW
      impact: HIGH
      category: security
      subcategory:
        - audit
      technology:
        - Wordpress Plugins
      references:
        - https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#sql-injection
        - https://owasp.org/www-community/attacks/SQL_Injection
      owasp:
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
  - id: tainted-exec
    languages:
    - php
    severity: ERROR
    message: >-
      User input is passed to a function that executes a shell command. This can lead to remote code execution.
    metadata:
      cwe:
      - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
      category: security
      technology:
      - php
      owasp:
      - A03:2021 - Injection
      references:
      - https://owasp.org/Top10/A03_2021-Injection
      subcategory:
      - vuln
      impact: HIGH
      likelihood: MEDIUM
      confidence: MEDIUM
    mode: taint
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: $_GET
        - pattern: $_POST
        - pattern: $_COOKIE
        - pattern: $_REQUEST
        - pattern: file_get_contents('php://input')
    pattern-sanitizers:
    - patterns:
      - pattern-either:
        - pattern: escapeshellcmd(...)
        - pattern: escapeshellarg(...)
    pattern-sinks:
    - patterns:
      - pattern-either:
        - pattern: exec(...)
        - pattern: system(...)
        - pattern: passthru(...)
        - patterns:
          - pattern: proc_open(...)
          - pattern-not: proc_open([...], ...)
        - pattern: popen(...)
        - pattern: expect_popen(...)
        - pattern: shell_exec(...)
        - pattern: |
            `...`
