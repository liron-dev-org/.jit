rules:
  - id: activerecord-sqli
    languages:
    - ruby
    message: >-
      Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the
      variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection,
      use parameterized queries or prepared statements instead.
      You can use parameterized statements like so:
      `Example.find_by_sql ["SELECT title FROM posts WHERE author = ? AND created > ?", author_id, start_date]`
    mode: taint
    metadata:
      references:
      - https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql
      category: security
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      technology:
      - aws-lambda
      - active-record
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    pattern-sinks:
    - patterns:
      - pattern: $QUERY
      - pattern-either:
        - pattern: ActiveRecord::Base.connection.execute($QUERY,...)
        - pattern: $MODEL.find_by_sql($QUERY,...)
        - pattern: $MODEL.select_all($QUERY,...)
      - pattern-inside: |
          require 'active_record'
          ...
    pattern-sources:
    - patterns:
      - pattern: event
      - pattern-inside: |
          def $HANDLER(event, context)
            ...
          end
    severity: ERROR
  - id: mysql2-sqli
    languages:
    - ruby
    message: >-
      Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the
      variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection,
      use parameterized queries or prepared statements instead.
      You can use sanitize statements like so: `escaped = client.escape(user_input)`
    mode: taint
    metadata:
      references:
      - https://github.com/brianmario/mysql2
      category: security
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      technology:
      - aws-lambda
      - mysql2
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    pattern-sinks:
    - patterns:
      - pattern: $QUERY
      - pattern-either:
        - pattern: $CLIENT.query($QUERY,...)
        - pattern: $CLIENT.prepare($QUERY,...)
      - pattern-inside: |
          require 'mysql2'
          ...
    pattern-sanitizers:
    - pattern: $CLIENT.escape(...)
    pattern-sources:
    - patterns:
      - pattern: event
      - pattern-inside: |
          def $HANDLER(event, context)
            ...
          end
    severity: ERROR
  - id: pg-sqli
    languages:
    - ruby
    message: >-
      Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the
      variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection,
      use parameterized queries or prepared statements instead.
      You can use parameterized statements like so:
      `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`
    mode: taint
    metadata:
      references:
      - https://www.rubydoc.info/gems/pg/PG/Connection
      category: security
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      technology:
      - aws-lambda
      - postgres
      - pg
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    pattern-sinks:
    - patterns:
      - pattern: $QUERY
      - pattern-either:
        - pattern: $CONN.exec($QUERY,...)
        - pattern: $CONN.exec_params($QUERY,...)
        - pattern: $CONN.exec_prepared($QUERY,...)
        - pattern: $CONN.async_exec($QUERY,...)
        - pattern: $CONN.async_exec_params($QUERY,...)
        - pattern: $CONN.async_exec_prepared($QUERY,...)
      - pattern-inside: |
          require 'pg'
          ...
    pattern-sources:
    - patterns:
      - pattern: event
      - pattern-inside: |
          def $HANDLER(event, context)
            ...
          end
    severity: ERROR
  - id: sequel-sqli
    languages:
    - ruby
    message: >-
      Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the
      variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection,
      use parameterized queries or prepared statements instead.
      You can use parameterized statements like so:
      `DB['select * from items where name = ?', name]`
    mode: taint
    metadata:
      references:
      - https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries
      category: security
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      technology:
      - aws-lambda
      - sequel
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    pattern-sinks:
    - patterns:
      - pattern: $QUERY
      - pattern-either:
        - pattern: DB[$QUERY,...]
        - pattern: DB.run($QUERY,...)
      - pattern-inside: |
          require 'sequel'
          ...
    pattern-sources:
    - patterns:
      - pattern: event
      - pattern-inside: |
          def $HANDLER(event, context)
            ...
          end
    severity: ERROR
  - id: tainted-deserialization
    mode: taint
    languages: [ruby]
    message: >-
      Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into
      strings,
      then later loaded from strings. However, uses of `load` can cause remote code execution.
      Loading user input with MARSHAL, YAML or CSV can potentially be dangerous.
      If you need to deserialize untrusted data, you should use JSON as it is only capable of returning
      'primitive' types
      such as strings, arrays, hashes, numbers and nil.
    metadata:
      references:
      - https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html
      - https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ
      - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb
      category: security
      owasp:
      - A08:2017 - Insecure Deserialization
      - A08:2021 - Software and Data Integrity Failures
      cwe:
      - 'CWE-502: Deserialization of Untrusted Data'
      technology:
      - ruby
      - aws-lambda
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    pattern-sinks:
    - patterns:
      - pattern: $SINK
      - pattern-either:
        - pattern-inside: |
            YAML.load($SINK,...)
        - pattern-inside: |
            CSV.load($SINK,...)
        - pattern-inside: |
            Marshal.load($SINK,...)
        - pattern-inside: |
            Marshal.restore($SINK,...)
    pattern-sources:
    - patterns:
      - pattern: event
      - pattern-inside: |
          def $HANDLER(event, context)
            ...
          end
    severity: ERROR
  - id: tainted-sql-string
    languages: [ruby]
    severity: ERROR
    message: >-
      Detected user input used to manually construct a SQL string. This is usually
      bad practice because manual construction could accidentally result in a SQL
      injection. An attacker could use a SQL injection to steal or modify contents
      of the database. Instead, use a parameterized query which is available
      by default in most database engines. Alternatively, consider using an
      object-relational mapper (ORM) such as Sequelize which will protect your queries.
    metadata:
      references:
      - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet
      category: security
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      technology:
      - aws-lambda
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    mode: taint
    pattern-sources:
    - patterns:
      - pattern: event
      - pattern-inside: |
          def $HANDLER(event, context)
            ...
          end
    pattern-sinks:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: |
              "...#{...}..."
          - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\b|\w+\s*!?[<>=].*
        - patterns:
          - pattern-either:
            - pattern: Kernel::sprintf("$SQLSTR", ...)
            - pattern: |
                "$SQLSTR" + $EXPR
            - pattern: |
                "$SQLSTR" % $EXPR
          - metavariable-regex:
              metavariable: $SQLSTR
              regex: (?i)(select|delete|insert|create|update|alter|drop)\b|\w+\s*!?[<>=].*
      - pattern-not-inside: |
          puts(...)
  - id: bad-deserialization
    mode: taint
    pattern-sources:
    - pattern-either:
      - pattern: params
      - pattern: cookies
    pattern-sinks:
    - pattern-either:
      - pattern: |
          CSV.load(...)
      - pattern: |
          Marshal.load(...)
      - pattern: |
          Marshal.restore(...)
      - pattern: |
          Oj.object_load(...)
      - pattern: |
          Oj.load($X)
    message: >-
      Checks for unsafe deserialization. Objects in Ruby can be serialized into strings,
      then later loaded from strings. However, uses of load and object_load can cause remote code execution.
      Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion
      instead.
    metadata:
      references:
      - https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ
      - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb
      category: security
      cwe:
      - 'CWE-502: Deserialization of Untrusted Data'
      owasp:
      - A08:2017 - Insecure Deserialization
      - A08:2021 - Software and Data Integrity Failures
      technology:
      - ruby
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    languages:
    - ruby
    severity: ERROR
  - id: cookie-serialization
    message: >-
      Checks if code allows cookies to be deserialized using Marshal. If the attacker
      can craft a valid cookie, this could lead to
      remote code execution. The hybrid check is just to warn users to migrate to :json
      for best practice.
    metadata:
      cwe:
      - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb
      - https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/
      category: security
      technology:
      - ruby
      owasp:
      - A03:2021 - Injection
      cwe2022-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
    languages:
    - ruby
    severity: ERROR
    pattern-either:
    - pattern: |
        Rails.application.config.action_dispatch.cookies_serializer = :marshal
    - pattern: |
        Rails.application.config.action_dispatch.cookies_serializer = :hybrid
  - id: dangerous-exec
    mode: taint
    pattern-sources:
    - patterns:
      - pattern: |
          def $F(...,$ARG,...)
              ...
          end
      - focus-metavariable: $ARG
    - pattern: params
    - pattern: cookies
    pattern-sinks:
    - patterns:
      - pattern: |
          $EXEC(...)
      - pattern-not: |
          $EXEC("...","...","...",...)
      - pattern-not: |
          $EXEC(["...","...","...",...],...)
      - pattern-not: |
          $EXEC({...},"...","...","...",...)
      - pattern-not: |
          $EXEC({...},["...","...","...",...],...)
      - metavariable-regex:
          metavariable: $EXEC
          regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$
    message: >-
      Detected non-static command inside $EXEC. Audit the input to '$EXEC'.
      If unverified user data can reach this call site, this is a code injection
      vulnerability. A malicious actor can inject a malicious script to execute
      arbitrary code.
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_execute.rb
      cwe:
      - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      owasp:
      - A03:2021 - Injection
      category: security
      technology:
      - ruby
      - rails
      references:
      - https://guides.rubyonrails.org/security.html#command-line-injection
      cwe2022-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    severity: ERROR
    languages: [ruby]
  - id: file-disclosure
    message: >-
      Special requests can determine whether a file exists on a filesystem that's outside
      the Rails app's
      root directory. To fix this, set config.serve_static_assets = false.
    metadata:
      cwe:
      - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb
      - https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ
      category: security
      technology:
      - ruby
      owasp:
      - A05:2017 - Broken Access Control
      - A01:2021 - Broken Access Control
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    languages:
    - ruby
    severity: ERROR
    pattern: config.serve_static_assets = true
    fix-regex:
      regex: =(\s)*true
      replacement: = false
  - id: filter-skipping
    patterns:
    - pattern-not: |
        $CALL "=~/.*(/:action.*).*/", $ACTION
    - pattern: |
        $CALL "=~/.*(/:action.*).*/"
    message: >-
      Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary
      view if an
      attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability
      by providing
      additional constraints.
    metadata:
      cwe:
      - 'CWE-1021: Improper Restriction of Rendered UI Layers or Frames'
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb
      - https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY
      category: security
      technology:
      - ruby
      owasp:
      - A04:2021 - Insecure Design
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    languages:
    - ruby
    severity: ERROR
  - id: force-ssl-false
    message: >-
      Checks for configuration setting of force_ssl to false. Force_ssl forces usage
      of HTTPS, which
      could lead to network interception of unencrypted application traffic. To fix,
      set config.force_ssl = true.
    metadata:
      cwe:
      - 'CWE-311: Missing Encryption of Sensitive Data'
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb
      category: security
      technology:
      - ruby
      owasp:
      - A03:2017 - Sensitive Data Exposure
      - A04:2021 - Insecure Design
      subcategory:
      - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: HIGH
    languages:
    - ruby
    severity: ERROR
    pattern: config.force_ssl = false
    fix-regex:
      regex: =\s*false
      replacement: = true
  - id: insufficient-rsa-key-size
    message: >-
      The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of
      2048 or higher.
    languages: [ruby]
    severity: ERROR
    metadata:
      technology:
      - ruby
      category: security
      references:
      - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
      cwe:
      - 'CWE-326: Inadequate Encryption Strength'
      owasp:
      - A03:2017 - Sensitive Data Exposure
      - A02:2021 - Cryptographic Failures
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
    patterns:
    - pattern-either:
      - pattern: OpenSSL::PKey::RSA.generate($SIZE,...)
      - pattern: OpenSSL::PKey::RSA.new($SIZE, ...)
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $ASSIGN = $SIZE
                ...
            - pattern-either:
              - pattern: OpenSSL::PKey::RSA.new($ASSIGN, ...)
              - pattern: OpenSSL::PKey::RSA.generate($ASSIGN, ...)
          - patterns:
            - pattern-inside: |
                def $METHOD1(...)
                ...
                $ASSIGN = $SIZE
                ...
                end
                ...
            - pattern-either:
              - pattern: OpenSSL::PKey::RSA.new($ASSIGN, ...)
              - pattern: OpenSSL::PKey::RSA.generate($ASSIGN, ...)
    - metavariable-comparison:
        metavariable: $SIZE
        comparison: $SIZE < 2048
  - id: json-entity-escape
    pattern-either:
    - pattern: |
        ActiveSupport.escape_html_entities_in_json = false
    - pattern: |
        config.active_support.escape_html_entities_in_json = false
    message: >-
      Checks if HTML escaping is globally disabled for JSON output. This could lead
      to XSS.
    metadata:
      cwe:
      - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_json_entity_escape.rb
      category: security
      technology:
      - ruby
      owasp:
      - A07:2017 - Cross-Site Scripting (XSS)
      - A03:2021 - Injection
      references:
      - https://owasp.org/Top10/A03_2021-Injection
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    languages:
    - ruby
    severity: ERROR
  - id: mass-assignment-protection-disabled
    pattern: $MODEL.new(params[...], ..., :without_protection => true, ...)
    message: >-
      Mass assignment protection disabled for '$MODEL'. This could
      permit assignment to sensitive model fields without intention. Instead,
      use 'attr_accessible' for the model or disable mass assigment using
      'config.active_record.whitelist_attributes = true'.
      ':without_protection => true' must be removed for this to take effect.
    metadata:
      cwe:
      - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes'
      owasp:
      - A08:2021 - Software and Data Integrity Failures
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/mass_assignment/index.markdown
      category: security
      technology:
      - ruby
      references:
      - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
      subcategory:
      - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
    severity: ERROR
    languages:
    - ruby
  - id: md5-used-as-password
    languages: [ruby]
    severity: ERROR
    message: >-
      It looks like MD5 is used as a password hash. MD5 is not considered a
      secure password hash because it can be cracked by an attacker in a short
      amount of time. Instead, use a suitable password hashing function such as
      bcrypt. You can use the `bcrypt` gem.
    metadata:
      category: security
      technology:
      - md5
      references:
      - https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html
      - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
      - https://github.com/returntocorp/semgrep-rules/issues/1609
      owasp:
      - A03:2017 - Sensitive Data Exposure
      - A02:2021 - Cryptographic Failures
      cwe:
      - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
    mode: taint
    pattern-sources:
    - pattern: Digest::MD5
    pattern-sinks:
    - patterns:
      - pattern: $FUNCTION(...);
      - metavariable-regex:
          metavariable: $FUNCTION
          regex: (?i)(.*password.*)
  - id: missing-csrf-protection
    patterns:
    - pattern: |
        class $CONTROLLER < ActionController::Base
          ...
        end
    - pattern-not: |
        class $CONTROLLER < ActionController::Base
          ...
          protect_from_forgery :with => :exception
        end
    - pattern-not: |
        class $CONTROLLER < ActionController::Base
          ...
          protect_from_forgery prepend: true, with: :exception
        end
    message: >-
      Detected controller which does not enable cross-site request forgery
      protections using 'protect_from_forgery'. Add
      'protect_from_forgery :with => :exception' to your controller class.
    severity: ERROR
    metadata:
      cwe:
      - 'CWE-352: Cross-Site Request Forgery (CSRF)'
      owasp:
      - A01:2021 - Broken Access Control
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross-site_request_forgery/index.markdown
      category: security
      technology:
      - ruby
      references:
      - https://owasp.org/Top10/A01_2021-Broken_Access_Control
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    languages:
    - ruby
  - id: model-attr-accessible
    message: >-
      Checks for dangerous permitted attributes that can lead to mass assignment vulnerabilities.
      Query parameters allowed using permit
      and attr_accessible are checked for allowance of dangerous attributes admin, banned,
      role, and account_id. Also checks for usages of
      params.permit!, which allows everything. Fix: don't allow admin, banned, role,
      and account_id using permit or attr_accessible.
    metadata:
      cwe:
      - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes'
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attr_accessible.rb
      category: security
      technology:
      - ruby
      owasp:
      - A08:2021 - Software and Data Integrity Failures
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    languages:
    - ruby
    severity: ERROR
    pattern-either:
    - pattern: |
        ....permit(..., :admin, ...)
    - pattern: |
        ....permit(..., :role, ...)
    - pattern: |
        ....permit(..., :banned, ...)
    - pattern: |
        ....permit(..., :account_id, ...)
    - pattern: |
        attr_accessible ..., :admin, ...
    - pattern: |
        attr_accessible ..., :role, ...
    - pattern: |
        attr_accessible ..., :banned, ...
    - pattern: |
        attr_accessible ..., :account_id, ...
    - pattern: |
        params.permit!
  - id: ruby-eval
    message: >-
      Use of eval with user-controllable input detected. This can lead
      to attackers running arbitrary code. Ensure external data does not
      reach here, otherwise this is a security vulnerability. Consider
      other ways to do this without eval.
    severity: ERROR
    metadata:
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      category: security
      cwe2022-top25: true
      cwe2021-top25: true
      cwe:
      - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      owasp:
      - A03:2021 - Injection
      references:
      - https://owasp.org/Top10/A03_2021-Injection
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_evaluation.rb
      subcategory:
      - vuln
      technology:
      - ruby
      - rails
    languages:
      - ruby
    mode: taint
    pattern-sources:
    - pattern-either:
      - pattern: params
      - pattern: cookies
      - patterns:
        - pattern: |
            RubyVM::InstructionSequence.compile(...)
        - pattern-not: |
            RubyVM::InstructionSequence.compile("...")
    pattern-sinks:
    - patterns:
      - pattern-either:
        - pattern: $X.eval
        - pattern: $X.class_eval
        - pattern: $X.instance_eval
        - pattern: $X.module_eval
        - pattern: $X.eval(...)
        - pattern: $X.class_eval(...)
        - pattern: $X.instance_eval(...)
        - pattern: $X.module_eval(...)
        - pattern: eval(...)
        - pattern: class_eval(...)
        - pattern: module_eval(...)
        - pattern: instance_eval(...)
      - pattern-not: $M("...",...)
  - id: bad-send
    message: >-
      Checks for unsafe use of Object#send, try, __send__, and public_send. These only
      account for unsafe
      use of a method, not target. This can lead to arbitrary calling of exit, along
      with arbitrary code execution.
      Please be sure to sanitize input in order to avoid this.
    metadata:
      cwe:
      - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb
      - https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html
      category: security
      technology:
      - ruby
      owasp:
      - A03:2021 - Injection
      cwe2022-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    languages:
    - ruby
    severity: ERROR
    pattern-either:
    - pattern: |
        $PARAM = params[...]
        ...
        $RES = $MOD.send($PARAM.$FUNC)
    - pattern: |
        $PARAM = params[...]
        ...
        $RES = $MOD.try($PARAM.$FUNC)
    - pattern: |
        $PARAM = params[...]
        ...
        $RES = $MOD.__send__($PARAM.$FUNC)
    - pattern: |
        $PARAM = params[...]
        ...
        $RES = $MOD.public_send($PARAM.$FUNC)
  - id: ssl-mode-no-verify
    pattern: OpenSSL::SSL::VERIFY_NONE
    message: >-
      Detected SSL that will accept an unverified connection.
      This makes the connections susceptible to man-in-the-middle attacks.
      Use 'OpenSSL::SSL::VERIFY_PEER' instead.
    fix-regex:
      regex: VERIFY_NONE
      replacement: VERIFY_PEER
    severity: ERROR
    languages:
    - ruby
    metadata:
      cwe:
      - 'CWE-295: Improper Certificate Validation'
      category: security
      technology:
      - ruby
      owasp:
      - A03:2017 - Sensitive Data Exposure
      - A07:2021 - Identification and Authentication Failures
      references:
      - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
  - id: weak-hashes-md5
    message: >-
      Should not use md5 to generate hashes. md5 is proven to be vulnerable through
      the use of brute-force attacks.
      Could also result in collisions, leading to potential collision attacks. Use SHA256
      or other hashing functions instead.
    metadata:
      cwe:
      - 'CWE-328: Use of Weak Hash'
      references:
      - https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575
      category: security
      technology:
      - ruby
      owasp:
      - A03:2017 - Sensitive Data Exposure
      - A02:2021 - Cryptographic Failures
      subcategory:
      - vuln
      likelihood: LOW
      impact: HIGH
      confidence: MEDIUM
    languages:
    - ruby
    severity: ERROR
    pattern-either:
    - pattern: Digest::MD5.base64digest $X
    - pattern: Digest::MD5.hexdigest $X
    - pattern: Digest::MD5.digest $X
    - pattern: Digest::MD5.new
    - pattern: OpenSSL::Digest::MD5.base64digest $X
    - pattern: OpenSSL::Digest::MD5.hexdigest $X
    - pattern: OpenSSL::Digest::MD5.digest $X
    - pattern: OpenSSL::Digest::MD5.new
  - id: weak-hashes-sha1
    message: >-
      Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision
      by Google, which could lead to vulnerabilities.
      Use SHA256, SHA3 or other hashing functions instead.
    metadata:
      cwe:
      - 'CWE-328: Use of Weak Hash'
      references:
      - https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html
      - https://shattered.io/
      category: security
      technology:
      - ruby
      owasp:
      - A03:2017 - Sensitive Data Exposure
      - A02:2021 - Cryptographic Failures
      subcategory:
      - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
    languages:
    - ruby
    severity: ERROR
    pattern-either:
    - pattern: Digest::SHA1.$FUNC
    - pattern: OpenSSL::Digest::SHA1.$FUNC
    - pattern: OpenSSL::HMAC.$FUNC("sha1",...)
  - id: ruby-pg-sqli
    mode: taint
    pattern-propagators:
    - pattern: $X << $Y
      from: $Y
      to: $X
    pattern-sources:
    - pattern-either:
      - pattern: |
          params
      - pattern: |
          cookies
    pattern-sinks:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $CON = PG.connect(...)
            ...
        - pattern-inside: |
            $CON = PG::Connection.open(...)
            ...
        - pattern-inside: |
            $CON = PG::Connection.new(...)
            ...
      - pattern-either:
        - pattern: |
            $CON.$METHOD($X,...)
        - pattern: |
            $CON.$METHOD $X, ...
      - focus-metavariable: $X
      - metavariable-regex:
          metavariable: $METHOD
          regex: ^(exec|exec_params)$
    languages:
    - ruby
    message: >-
      Detected string concatenation with a non-literal variable in a pg
      Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection,
      use parameterized queries or prepared statements instead.
      You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1,
      2, nil])`
      And you can use prepared statements with `exec_prepared`.
    metadata:
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      references:
      - https://www.rubydoc.info/gems/pg/PG/Connection
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
    severity: ERROR
  - id: avoid-render-text
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render_inline.rb
      owasp:
      - A07:2017 - Cross-Site Scripting (XSS)
      - A03:2021 - Injection
      cwe:
      - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
      references:
      - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    message: >-
      'render text: ...' actually sets the content-type to 'text/html'.
      If external data can reach here, this exposes your application
      to cross-site scripting (XSS) attacks. Instead, use 'render plain: ...' to
      render non-HTML text.
    languages: [ruby]
    severity: ERROR
    pattern: 'render text: ...'
    fix-regex:
      regex: 'text:'
      replacement: 'plain:'
  - id: avoid-render-inline
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render_inline.rb
      owasp:
      - A07:2017 - Cross-Site Scripting (XSS)
      - A03:2021 - Injection
      cwe:
      - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
      references:
      - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    message: >-
      'render inline: ...' renders an entire ERB template inline and is dangerous.
      If external data can reach here, this exposes your application
      to server-side template injection (SSTI) or cross-site scripting (XSS) attacks.
      Instead, consider using a partial or another safe rendering method.
    languages: [ruby]
    severity: ERROR
    pattern: 'render inline: ...'
  - id: avoid-render-dynamic-path
    metadata:
      owasp:
      - A05:2017 - Broken Access Control
      - A01:2021 - Broken Access Control
      cwe:
      - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
      references:
      - https://brakemanscanner.org/docs/warning_types/dynamic_render_paths/
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
    message: >-
      Avoid rendering user input. It may be possible for a malicious user to input a path that lets them
      access a template they
      shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure
      it's an allowed template.
    languages: [ruby]
    severity: ERROR
    mode: taint
    pattern-sources:
    - pattern: params
    - pattern: cookies
    - pattern: request.env
    pattern-sinks:
    - patterns:
      - pattern-inside: render($X => $INPUT, ...)
      - pattern: $INPUT
      - metavariable-pattern:
          metavariable: $X
          pattern-either:
          - pattern: action
          - pattern: template
          - pattern: partial
          - pattern: file
  - id: avoid-link-to
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_link_to.rb
      owasp:
      - A07:2017 - Cross-Site Scripting (XSS)
      - A03:2021 - Injection
      cwe:
      - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
      references:
      - https://brakemanscanner.org/docs/warning_types/link_to/
      - https://brakemanscanner.org/docs/warning_types/link_to_href/
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
    message: >-
      This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped.
      This means that user input which reaches the body will be executed when the HTML is rendered.
      Even in other versions, values starting with `javascript:` or `data:` are not escaped.
      It is better to create and use a safer function which checks the body argument.
    languages: [ruby]
    severity: ERROR
    mode: taint
    pattern-sources:
    - pattern: params
    - pattern: cookies
    - pattern: request.env
    - pattern-either:
      - pattern: $MODEL.url(...)
      - pattern: $MODEL.uri(...)
      - pattern: $MODEL.link(...)
      - pattern: $MODEL.page(...)
      - pattern: $MODEL.site(...)
    pattern-sinks:
    - pattern: link_to(...)
    pattern-sanitizers:
    - patterns:
      - pattern: |
          "...#{...}..."
      - pattern-not: |
          "#{...}..."
  - id: avoid-default-routes
    metadata:
      owasp:
      - A01:2021 - Broken Access Control
      cwe:
      - 'CWE-276: Incorrect Default Permissions'
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/default_routes/index.markdown
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    message: >-
      Default routes are enabled in this routes file. This means any public method on a
      controller can be called as an action. It is very easy to accidentally expose a
      method you didn't mean to. Instead, remove this line and explicitly include all
      routes you intend external users to follow.
    languages: [ruby]
    severity: ERROR
    patterns:
    - pattern-either:
      - pattern: map.connect ":controller/:action/:id"
      - pattern: match ':controller(/:action(/:id(.:format)))'
    paths:
      include:
      - '*routes.rb'
  - id: detailed-exceptions
    metadata:
      owasp:
      - A01:2021 - Broken Access Control
      cwe:
      - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_detailed_exceptions.rb
      category: security
      technology:
      - rails
      references:
      - https://owasp.org/Top10/A01_2021-Broken_Access_Control
      cwe2021-top25: true
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
    message: >-
      Found that the setting for providing detailed exception reports in Rails
      is set to true. This can lead to information exposure,
      where sensitive system or internal information is displayed to the end user. Instead, turn this setting
      off.
    languages: [ruby]
    severity: ERROR
    patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            config.consider_all_requests_local = true
      - patterns:
        - pattern-inside: |
            class $CONTROLLER < ApplicationController
              ...
            end
        - pattern: |
            def show_detailed_exceptions? (...)
              ...
            return $RETURN
            end
        - metavariable-pattern:
            metavariable: $RETURN
            patterns:
            - pattern-not: |
                false
  - id: avoid-tainted-shell-call
    metadata:
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      cwe:
      - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
    message: >-
      Using user input when accessing files is potentially dangerous. A malicious actor could use this to
      modify or access files
      they have no right to.
    languages: [ruby]
    severity: ERROR
    mode: taint
    pattern-sources:
    - pattern-either:
      - pattern: params[...]
      - pattern: cookies
      - pattern: request.env
    pattern-sinks:
    - patterns:
      - pattern-either:
        - patterns:
            - pattern: Kernel.$X(...)
        - patterns:
          - pattern-either:
            - pattern: Shell.$X(...)
            - patterns:
              - pattern-inside: |
                  $SHELL = Shell.$ANY(...)
                  ...
                  $SHELL.$X(...)
              - pattern: $SHELL.$X(...)
      - metavariable-pattern:
          metavariable: $X
          patterns:
          - pattern-either:
            - pattern: cat
            - pattern: chdir
            - pattern: chroot
            - pattern: delete
            - pattern: entries
            - pattern: exec
            - pattern: foreach
            - pattern: glob
            - pattern: install
            - pattern: lchmod
            - pattern: lchown
            - pattern: link
            - pattern: load
            - pattern: load_file
            - pattern: makedirs
            - pattern: move
            - pattern: new
            - pattern: open
            - pattern: read
            - pattern: readlines
            - pattern: rename
            - pattern: rmdir
            - pattern: safe_unlink
            - pattern: symlink
            - pattern: syscopy
            - pattern: sysopen
            - pattern: system
            - pattern: truncate
            - pattern: unlink
  - id: avoid-tainted-http-request
    metadata:
      owasp:
      - A10:2021 - Server-Side Request Forgery (SSRF)
      cwe:
      - 'CWE-918: Server-Side Request Forgery (SSRF)'
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      impact: MEDIUM
      likelihood: MEDIUM
      confidence: MEDIUM
    message: >-
      Using user input when accessing files is potentially dangerous. A malicious actor could use this to
      modify or access files
      they have no right to.
    languages: [ruby]
    severity: ERROR
    mode: taint
    pattern-sources:
    - pattern: params
    - pattern: cookies
    - pattern: request.env
    pattern-sinks:
    - pattern-either:
      - patterns:
        - pattern: Net::HTTP::$METHOD.new(...)
        - metavariable-pattern:
            metavariable: $METHOD
            patterns:
            - pattern-either:
              - pattern: Copy
              - pattern: Delete
              - pattern: Get
              - pattern: Head
              - pattern: Lock
              - pattern: Mkcol
              - pattern: Move
              - pattern: Options
              - pattern: Patch
              - pattern: Post
              - pattern: Propfind
              - pattern: Proppatch
              - pattern: Put
              - pattern: Trace
              - pattern: Unlock
      - patterns:
        - pattern: Net::HTTP.$X(...)
        - metavariable-pattern:
            metavariable: $X
            patterns:
            - pattern-either:
              - pattern: get
              - pattern: get2
              - pattern: head
              - pattern: head2
              - pattern: options
              - pattern: patch
              - pattern: post
              - pattern: post2
              - pattern: post_form
              - pattern: put
              - pattern: request
              - pattern: request_get
              - pattern: request_head
              - pattern: request_post
              - pattern: send_request
              - pattern: trace
              - pattern: get_print
              - pattern: get_response
              - pattern: start
  - id: avoid-tainted-ftp-call
    metadata:
      owasp:
      - A05:2017 - Broken Access Control
      - A01:2021 - Broken Access Control
      cwe:
      - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
    message: >-
      Using user input when accessing files is potentially dangerous. A malicious actor could use this to
      modify or access files
      they have no right to.
    languages: [ruby]
    severity: ERROR
    mode: taint
    pattern-sources:
    - pattern: params
    - pattern: cookies
    - pattern: request.env
    pattern-sinks:
    - pattern-either:
      - pattern: Net::FTP.$X(...)
      - patterns:
        - pattern-inside: |
            $FTP = Net::FTP.$OPEN(...)
            ...
            $FTP.$METHOD(...)
        - pattern: $FTP.$METHOD(...)
  - id: avoid-tainted-file-access
    metadata:
      owasp:
      - A05:2017 - Broken Access Control
      - A01:2021 - Broken Access Control
      cwe:
      - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown
      category: security
      technology:
      - rails
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
    message: >-
      Using user input when accessing files is potentially dangerous. A malicious actor could use this to
      modify or access files
      they have no right to.
    languages: [ruby]
    severity: ERROR
    mode: taint
    pattern-sources:
    - pattern: params
    - pattern: cookies
    - pattern: request.env
    pattern-sinks:
    - patterns:
      - pattern-either:
        - pattern: Dir.$X(...)
        - pattern: File.$X(...)
        - pattern: IO.$X(...)
        - pattern: Kernel.$X(...)
        - pattern: PStore.$X(...)
        - pattern: Pathname.$X(...)
      - metavariable-pattern:
          metavariable: $X
          patterns:
          - pattern-either:
            - pattern: chdir
            - pattern: chroot
            - pattern: delete
            - pattern: entries
            - pattern: foreach
            - pattern: glob
            - pattern: install
            - pattern: lchmod
            - pattern: lchown
            - pattern: link
            - pattern: load
            - pattern: load_file
            - pattern: makedirs
            - pattern: move
            - pattern: new
            - pattern: open
            - pattern: read
            - pattern: readlines
            - pattern: rename
            - pattern: rmdir
            - pattern: safe_unlink
            - pattern: symlink
            - pattern: syscopy
            - pattern: sysopen
            - pattern: truncate
            - pattern: unlink
  - id: avoid-session-manipulation
    metadata:
      shortDescription: Allowing an attacker to manipulate the session may lead to unintended behavior.
      tags: [security]
      owasp:
      - A01:2021 - Broken Access Control
      cwe:
      - 'CWE-276: Incorrect Default Permissions'
      references:
      - https://brakemanscanner.org/docs/warning_types/session_manipulation/
      category: security
      technology:
      - rails
      help: |
        ## Remediation
        Session manipulation can occur when an application allows user-input in session keys. Since sessions are typically considered a source of truth (e.g. to check the logged-in user or to match CSRF tokens), allowing an attacker to manipulate the session may lead to unintended behavior.

        ## References
        [Session Manipulation](https://brakemanscanner.org/docs/warning_types/session_manipulation/)
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
    message: >-
      This gets data from session using user inputs. A malicious user may be able to retrieve
      information from your session that you didn't intend them to. Do not use user input as
      a session key.
    languages: [ruby]
    severity: ERROR
    mode: taint
    pattern-sources:
    - pattern: params
    - pattern: cookies
    - pattern: request.env
    pattern-sinks:
    - pattern: session[...]
  - id: check-unsafe-reflection
    mode: taint
    pattern-sources:
    - pattern-either:
      - pattern: |
          cookies[...]
      - patterns:
        - pattern: |
            cookies. ... .$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: (?!signed|encrypted)
      - pattern: |
          params[...]
      - pattern: |
          request.env[...]
    pattern-sinks:
    - patterns:
      - pattern: $X
      - pattern-either:
        - pattern-inside: |
            $X.constantize
        - pattern-inside: |
            $X. ... .safe_constantize
        - pattern-inside: |
            const_get(...)
        - pattern-inside: |
            qualified_const_get(...)
    message: Found user-controllable input to Ruby reflection functionality. This allows a remote user
      to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide
      user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable
      input.
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection.rb
      category: security
      cwe:
      - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      owasp:
      - A03:2021 - Injection
      technology:
      - ruby
      - rails
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails2/app/controllers/application_controller.rb
      cwe2022-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
  - id: check-unsafe-reflection-methods
    mode: taint
    pattern-sources:
    - pattern-either:
      - pattern: |
          cookies[...]
      - patterns:
        - pattern: |
            cookies. ... .$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: (?!signed|encrypted)
      - pattern: |
          params[...]
      - pattern: |
          request.env[...]
    pattern-sinks:
    - patterns:
      - pattern: $X
      - pattern-either:
        - pattern-inside: |
            $X. ... .to_proc
        - pattern-inside: |
            $Y.method(...)
        - pattern-inside: |
            $Y.tap(...)
    message: Found user-controllable input to a reflection method. This may allow a user to alter program
      behavior and potentially execute arbitrary instructions in the context of the process. Do not provide
      arbitrary user input to `tap`, `method`, or `to_proc`
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection_methods.rb
      category: security
      cwe:
      - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      owasp:
      - A03:2021 - Injection
      technology:
      - ruby
      - rails
      references:
      - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/groups_controller.rb
      cwe2022-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
  - id: check-sql
    mode: taint
    pattern-sources:
    - pattern-either:
      - pattern: |
          cookies[...]
      - patterns:
        - pattern: |
            cookies. ... .$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: (?!signed|encrypted)
      - pattern: |
          params[...]
      - pattern: |
          request.env[...]
    pattern-sanitizers:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: $X
          - pattern-either:
            - pattern-inside: |
                :$KEY => $X
            - pattern-inside: |
                ["...",$X,...]
        - pattern: |
            params[...].to_i
        - pattern: |
            params[...].to_f
        - patterns:
          - pattern: |
              params[...] ? $A : $B
          - metavariable-pattern:
              metavariable: $A
              patterns:
              - pattern-not: |
                  params[...]
          - metavariable-pattern:
              metavariable: $B
              patterns:
              - pattern-not: |
                  params[...]
    pattern-sinks:
    - patterns:
      - pattern: $X
      - pattern-not-inside: |
          $P.where("...",...)
      - pattern-not-inside: |
          $P.where(:$KEY => $VAL,...)
      - pattern-either:
        - pattern-inside: |
            $P.$M(...)
        - pattern-inside: |
            $P.$M("...",...)
      - pattern-inside: |
          class $P < ActiveRecord::Base
            ...
          end
      - metavariable-regex:
          metavariable: $M
          regex: (where|find|first|last|select|minimum|maximum|calculate|sum|average)
    message: Found potential SQL injection due to unsafe SQL query construction via $X. Where possible,
      prefer parameterized queries.
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_sql.rb
      category: security
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      technology:
      - ruby
      - rails
      references:
      - https://owasp.org/www-community/attacks/SQL_Injection
      - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
  - id: check-send-file
    mode: taint
    pattern-sources:
    - pattern-either:
      - pattern: |
          cookies[...]
      - patterns:
        - pattern: |
            cookies. ... .$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: (?!signed|encrypted)
      - pattern: |
          params[...]
      - pattern: |
          request.env[...]
    pattern-sinks:
    - patterns:
      - pattern: |
          send_file ...
    message: Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files
      from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send_file.rb
      category: security
      cwe:
      - 'CWE-73: External Control of File Name or Path'
      owasp:
      - A04:2021 - Insecure Design
      technology:
      - ruby
      - rails
      references:
      - https://owasp.org/www-community/attacks/Path_Traversal
      - https://owasp.org/Top10/A01_2021-Broken_Access_Control/
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
  - id: check-render-local-file-include
    mode: taint
    pattern-sources:
      - patterns:
          - pattern: params[...]
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: |
                  render ..., file: ...
              - pattern: |
                  render ..., inline: ...
              - pattern: |
                  render ..., template: ...
              - pattern: |
                  render ..., action: ...
              - pattern: |
                  render $FILE, ...
    pattern-sanitizers:
      - patterns:
          - pattern: $MAP[...]
          - metavariable-pattern:
              metavariable: $MAP
              patterns:
                - pattern-not-regex: params
      - pattern: File.basename(...)
    message: Found request parameters in a call to `render`. This can allow end
      users to request arbitrary local files which may result in leaking
      sensitive information persisted on disk. Where possible, avoid letting
      users specify template paths for `render`. If you must allow user input,
      use an allow-list of known templates or normalize the user-supplied value
      with `File.basename(...)`.
    languages:
      - ruby
    severity: ERROR
    metadata:
      technology:
        - ruby
        - rails
      category: security
      cwe:
        - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory
          ('Path Traversal')"
      owasp:
        - A05:2017 - Broken Access Control
        - A01:2021 - Broken Access Control
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb
      references:
        - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion
        - https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Path Traversal
  - id: check-regex-dos
    mode: taint
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: |
            cookies[...]
        - patterns:
          - pattern: |
              cookies. ... .$PROPERTY[...]
          - metavariable-regex:
              metavariable: $PROPERTY
              regex: (?!signed|encrypted)
        - pattern: |
            params[...]
        - pattern: |
            request.env[...]
        - patterns:
          - pattern: $Y
          - pattern-either:
            - pattern-inside: |
                $RECORD.read_attribute($Y)
            - pattern-inside: |
                $RECORD[$Y]
          - metavariable-regex:
              metavariable: $RECORD
              regex: '[A-Z][a-z]+'
    pattern-sinks:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: $Y
          - pattern-inside: |
              /...#{...}.../
        - patterns:
          - pattern: $Y
          - pattern-inside: |
              Regexp.new(...)
    message: >-
      Found a potentially user-controllable argument in the construction of a regular expressions.
      This may result in excessive resource consumption when applied to certain inputs, or when the user
      is allowed to control the match target.
      Avoid allowing users to specify regular expressions processed by the server.
      If you must support user-controllable input in a regular expression, use an allow-list to restrict
      the expressions users may supply to limit catastrophic backtracking.
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb
      category: security
      cwe:
      - 'CWE-1333: Inefficient Regular Expression Complexity'
      owasp:
      - A03:2017 - Sensitive Data Exposure
      technology:
      - ruby
      - rails
      references:
      - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
      subcategory:
      - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
  - id: check-redirect-to
    mode: taint
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: params
        - pattern: cookies
        - pattern: request.env
        - pattern: url_for(params[...],...,:only_path => false,...)
    pattern-sanitizers:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: |
              $F(...)
          - metavariable-pattern:
              metavariable: $F
              patterns:
              - pattern-not-regex: (params|url_for|cookies|request.env|permit|redirect_to)
        - pattern: |
            params.merge! :only_path => true
            ...
        - pattern: |
            params.slice(...)
            ...
        - pattern: |
            redirect_to [...]
        - patterns:
          - pattern: |
              $MODEL. ... .$M(...)
              ...
          - metavariable-regex:
              metavariable: $MODEL
              regex: '[A-Z]\w+'
          - metavariable-regex:
              metavariable: $M
              regex: (all|create|find|find_by|find_by_sql|first|last|new|from|group|having|joins|lock|order|reorder|select|where|take)
        - patterns:
          - pattern: |
              params.$UNSAFE_HASH.merge(...,:only_path => true,...)
              ...
          - metavariable-regex:
              metavariable: $UNSAFE_HASH
              regex: to_unsafe_h(ash)?
        - patterns:
          - pattern: params.permit(...,$X,...)
          - metavariable-pattern:
              metavariable: $X
              patterns:
              - pattern-not-regex: (host|port|(sub)?domain)
    pattern-sinks:
    - patterns:
      - pattern: $X
      - pattern-inside: |
          redirect_to $X, ...
      - pattern-not-regex: params\.\w+(?<!permit)\(.*?\)
    message: Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to`
      without the `:only_path => true` hash value.
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_redirect.rb
      category: security
      cwe:
      - "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
      technology:
      - ruby
      - rails
      references:
      - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
      owasp:
      - A01:2021 - Broken Access Control
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
  - id: check-rails-session-secret-handling
    patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            :$KEY => "$LITERAL"
        - pattern-inside: |
            ActionController::Base.session = {...}
      - pattern: |
          $RAILS::Application.config.$KEY = "$LITERAL"
      - pattern: |
          Rails.application.config.$KEY = "$LITERAL"
    - metavariable-regex:
        metavariable: $KEY
        regex: ^secret(_(token|key_base))?$
    message: Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values
      to source control! Any user in possession of this value may falsify arbitrary session data in your
      application. Read this value from an environment variable, KMS, or file on disk outside of source
      control.
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_session_settings.rb
      category: security
      cwe:
      - 'CWE-540: Inclusion of Sensitive Information in Source Code'
      owasp:
      - A01:2021 - Broken Access Control
      technology:
      - ruby
      - rails
      references:
      - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes
      - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails4_with_engines/config/initializers/secret_token.rb
      - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3/config/initializers/secret_token.rb
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
  - id: check-permit-attributes-high
    patterns:
    - pattern: $P.permit($ATTRIBUTE)
    - metavariable-regex:
        metavariable: $ATTRIBUTE
        regex: .*(admin|account_id).*
    message: Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application
      vulnerable to mass assignment.
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_permit_attributes.rb
      category: security
      cwe:
      - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes'
      owasp:
      - A08:2021 - Software and Data Integrity Failures
      technology:
      - ruby
      - rails
      references:
      - https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html
      subcategory:
      - audit
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
  - id: check-dynamic-render-local-file-include
    mode: search
    paths:
      include:
      - '*.erb'
    patterns:
    - pattern: |
        params[...]
    - pattern-inside: |
        render :file => ...
    message: Found request parameters in a call to `render` in a dynamic context. This can allow end users
      to request arbitrary local files which may result in leaking sensitive information persisted on disk.
    languages:
    - generic
    severity: ERROR
    metadata:
      technology:
      - ruby
      - rails
      category: security
      cwe:
      - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
      owasp:
      - A05:2017 - Broken Access Control
      - A01:2021 - Broken Access Control
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb
      references:
      - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion
      - https://github.com/presidentbeef/brakeman/blob/f74cb53ead47f0af821d98b5b41e16d63100c240/test/apps/rails2/app/views/home/test_render.html.erb
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
  - id: check-before-filter
    mode: search
    patterns:
    - pattern-either:
      - pattern: |
          skip_filter ..., :except => $ARGS
      - pattern: |
          skip_before_filter ..., :except => $ARGS
    message: 'Disabled-by-default Rails controller checks make it much easier to introduce access control
      mistakes. Prefer an allowlist approach with `:only => [...]` rather than `except: => [...]`'
    languages:
    - ruby
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_skip_before_filter.rb
      category: security
      cwe:
      - 'CWE-284: Improper Access Control'
      owasp:
      - A05:2017 - Broken Access Control
      - A01:2021 - Broken Access Control
      technology:
      - ruby
      - rails
      references:
      - https://owasp.org/Top10/A01_2021-Broken_Access_Control
      subcategory:
      - vuln
      impact: MEDIUM
      likelihood: MEDIUM
      confidence: MEDIUM
  - id: tainted-url-host
    languages: [ruby]
    severity: ERROR
    message: >-
      User data flows into the host portion of this manually-constructed URL.
      This could allow an attacker to send data to their own server, potentially
      exposing sensitive data such as cookies or authorization information sent
      with this request. They could also probe internal servers or other resources
      that the server runnig this code can access. (This is called server-side
      request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter`
      gem and guard the url construction with `SsrfFilter(...)`, or create
      an allowlist for approved hosts.
    metadata:
      cwe:
      - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
      owasp:
      - A07:2017 - Cross-Site Scripting (XSS)
      - A03:2021 - Injection
      category: security
      technology:
      - rails
      references:
      - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
      - https://github.com/arkadiyt/ssrf_filter
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    mode: taint
    pattern-sanitizers:
    - pattern: SsrfFilter
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: params
        - pattern: request
    pattern-sinks:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: |
              $URLSTR
          - pattern-regex: \w+:\/\/#{.*}
        - patterns:
          - pattern-either:
            - pattern: Kernel::sprintf("$URLSTR", ...)
            - pattern: |
                "$URLSTR" + $EXPR
            - pattern: |
                "$URLSTR" % $EXPR
          - metavariable-pattern:
              metavariable: $URLSTR
              language: generic
              pattern: $SCHEME:// ...
  - id: tainted-sql-string
    languages:
    - ruby
    severity: ERROR
    message: Detected user input used to manually construct a SQL string. This is usually bad practice because
      manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection
      to steal or modify contents of the database. Instead, use a parameterized query which is available
      by default in most database engines. Alternatively, consider using an object-relational mapper (ORM)
      such as ActiveRecord which will protect your queries.
    metadata:
      cwe:
      - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      owasp:
      - A01:2017 - Injection
      - A03:2021 - Injection
      category: security
      technology:
      - rails
      references:
      - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
      - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
    mode: taint
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: params
        - pattern: request
    pattern-sanitizers:
    - pattern: |
        $PARAMS.slice(...)
    pattern-sinks:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - patterns:
              - pattern: |
                  $RECORD.where($X,...)

            - pattern: |
                $RECORD.find(..., :conditions => $X,...)
          - focus-metavariable: $X
        - patterns:
          - pattern: |
              "$SQLVERB#{$EXPR}..."
          - pattern-not-inside: |
              $FUNC("...",  "...#{$EXPR}...",...)
          - focus-metavariable: $SQLVERB
          - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\b
        - patterns:
          - pattern-either:
            - pattern: Kernel::sprintf("$SQLSTR", $EXPR)
            - pattern: |
                "$SQLSTR" + $EXPR
            - pattern: |
                "$SQLSTR" % $EXPR
          - pattern-not-inside: |
              $FUNC("...",  "...#{$EXPR}...",...)
          - focus-metavariable: $EXPR
          - metavariable-regex:
              metavariable: $SQLSTR
              regex: (?i)(select|delete|insert|create|update|alter|drop)\b
